{"title":"JavaScript 傳值與傳參考","uid":"c055a8c0807ed4e545e8325e663a9e57","slug":"js-value-or-reference","date":"2023-10-26T02:51:17.000Z","updated":"2024-03-09T08:23:56.078Z","comments":true,"path":"api/articles/js-value-or-reference.json","keywords":null,"cover":"https://i.imgur.com/DvyeScP.jpg","content":"<h2 id=\"JavaScript-的資料型別\"><a href=\"#JavaScript-的資料型別\" class=\"headerlink\" title=\"JavaScript 的資料型別\"></a>JavaScript 的資料型別</h2><p>在討論到傳值(Call by Value)或傳參考(Call by Reference)之前，我們先來了解 JavaScript 的資料型別，它分為「原始型別」跟「物件型別」兩大分類。</p>\n<p>原始型別(純值)：</p>\n<ul>\n<li>Boolean</li>\n<li>String</li>\n<li>Number</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>BigInt</li>\n<li>Symbol</li>\n</ul>\n<p>物件型別：<br>除了以上七種原始型別之外，其他都歸類為物件型別。（所以並沒有陣列型別、函式型別）</p>\n<h2 id=\"傳值-Call-by-Value-、傳參考-Call-by-Reference\"><a href=\"#傳值-Call-by-Value-、傳參考-Call-by-Reference\" class=\"headerlink\" title=\"傳值(Call by Value)、傳參考 (Call by Reference)\"></a>傳值(Call by Value)、傳參考 (Call by Reference)</h2><p>了解到 JavaScript 的資料型別後，若以一般、基本狀況來說，<strong>原始型別的資料依循傳值的特性；而物件型別的資料則依循傳參考的特性</strong>。</p>\n<h3 id=\"傳值-Call-by-Value\"><a href=\"#傳值-Call-by-Value\" class=\"headerlink\" title=\"傳值(Call by Value)\"></a>傳值(Call by Value)</h3><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">var</span><span style=\"color: #BABED8\"> num1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">var</span><span style=\"color: #BABED8\"> num2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #BABED8\">(num1 </span><span style=\"color: #89DDFF\">===</span><span style=\"color: #BABED8\"> num2)</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// true</span></span></code></pre></div><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">var</span><span style=\"color: #BABED8\"> num1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">var</span><span style=\"color: #BABED8\"> num2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> num1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">num2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #BABED8\">(num1 </span><span style=\"color: #89DDFF\">===</span><span style=\"color: #BABED8\"> num2)</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// false</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #BABED8\">(num1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> num2)</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 10, 100</span></span></code></pre></div><p>如上方兩個範例所示，如果你有一些些 JS 基礎，對於 <code>console.log</code> 的內容應該不會意外，我們以第二個範例作執行流程：</p>\n<ol>\n<li><code>var num1 = 10;</code>，宣告一個 num1 的變數，並指定為 10，這裡會建立一個記憶體(假設為0x01)來儲存 10 這個值。</li>\n<li><code>var num2 = num1;</code>，宣告一個 num2 的變數，並指定為 num1，這裡的 num2 會建立另一個記憶體(假設為0x02)，並將 num1 的值(10)複製過來儲存。</li>\n<li><code>num2 = 100;</code> 將 num2 的值改為 100。</li>\n<li><code>console.log(num1 === num2); console.log(num1, num2)</code> num2 的更動並不會影響到 num1，因為他們存在於兩個不同的記憶體位置，num1 的值為 10，而 num2 的值為 100。</li>\n</ol>\n<p><strong>在原始型別的變數赋值和傳遞是以”值”來進行的，值跟值的關係是獨立不連動的。</strong></p>\n<h3 id=\"傳參考-Call-by-Reference\"><a href=\"#傳參考-Call-by-Reference\" class=\"headerlink\" title=\"傳參考 (Call by Reference)\"></a>傳參考 (Call by Reference)</h3><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">var</span><span style=\"color: #BABED8\"> obj1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">num</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">var</span><span style=\"color: #BABED8\"> obj2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">num</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #BABED8\">(obj1 </span><span style=\"color: #89DDFF\">===</span><span style=\"color: #BABED8\"> obj2)</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// false</span></span></code></pre></div><p>物件在建立時，一樣會產生記憶體，不過這邊的變數儲存的是”記憶體位置”，而不是值（內容）。如上方範例所示，即使兩個物件內容是一致的，在<code>console.log</code>是得到不相等的，因為 obj1 跟 obj2 的記憶體參照位置不同。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">var</span><span style=\"color: #BABED8\"> obj1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">num</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">var</span><span style=\"color: #BABED8\"> obj2 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> obj1</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">obj2</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">num </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #BABED8\">(obj1</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">num</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> obj2</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">num)</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 100, 100</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #BABED8\">(obj1 </span><span style=\"color: #89DDFF\">===</span><span style=\"color: #BABED8\"> obj2)</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// true</span></span></code></pre></div><p>我們再從這個範例拆解來更了解傳參考：</p>\n<ol>\n<li><code>var obj1 = &#123; num: 10 &#125;</code>，我們建立了一個內容為 <code>&#123;num: 10&#125;</code>的物件，而這個內容會儲存到記憶體(假設為 0x01)，而 obj1 這個變數是指向這個 0x01 的位置。</li>\n<li><code>var obj2 = obj1;</code>，接著我們將 obj1 給賦予到 obj2 變數，不過因為不是”創建”物件，所以 obj2 變數是指向到 0x01 的位置，也就是說 obj2 跟 obj1 都指向相同的記憶體位置。</li>\n<li><code>obj2.num = 100;</code>，雖然以變數名稱來說，似乎是針對 obj2 裡頭的內容做調整，但其實是調整到 0x01 這個記憶體位置所對應的內容。</li>\n<li><code>console.log(obj1.num, obj2.num);</code>，因為都是在 0x01 這個記憶體位置，所以兩者是相同且連動的。</li>\n</ol>\n<p><strong>在物件型別中，變數的赋值和傳遞是以”記憶體位置”來做參照的。</strong></p>\n<h2 id=\"例外跟結論\"><a href=\"#例外跟結論\" class=\"headerlink\" title=\"例外跟結論\"></a>例外跟結論</h2><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">var</span><span style=\"color: #BABED8\"> obj1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">num</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">function</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">changeNum</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">param</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #BABED8\">param</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">num</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">changeNum</span><span style=\"color: #BABED8\">(obj1)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #BABED8\">(obj1)</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// &#123;num: 100&#125;</span></span></code></pre></div><p>在上個段落的一開始提到，若以一般、基本狀況來說，原始型別的資料依循傳值的特性，而物件型別的資料則依循傳參考的特性。所以對於上方的範例結果，應該不會感到意外，即使作為 param 參數，它還是指向同個記憶體位置。</p>\n<p>而有了一般狀況，就會有例外，接著我們來看例外的狀況是什麼。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">var</span><span style=\"color: #BABED8\"> obj1 </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">num</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">10</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">function</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">changeNum</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">param</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #BABED8\">param</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F07178\"> num</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">1000</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">changeNum</span><span style=\"color: #BABED8\">(obj1)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #BABED8\">(obj1)</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 仍然是 num: 10</span></span>\n<span class=\"line\"></span></code></pre></div><p>如果依照剛才提到的傳參考，因為記憶體的指向，我們應該會推敲<code>console.log(obj1);</code>的結果是 <code>&#123; num: 1000 &#125;</code>；不過實際上得到的結果是 <code>&#123;num: 10&#125;</code>，也就是參數(param)中指向新物件時，記憶體將會重新指向，而與原先的物件(obj1)將沒有關聯性。<br>所以主流上對於這個特性，比較大宗是以 Call by Sharing 這個名詞來做解釋，我自己在複習（<del>補技術債</del>）時也燒腦了一下；不過後來覺得不用太拘泥在這些名詞，而是知道 JS 的這些特性，盡可能避免踩雷。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.tenlong.com.tw/products/9789864344130?list_name=srh\">0 陷阱！0 誤解！8 天重新認識 JavaScript！</a></p>\n<p><a href=\"https://www.tenlong.com.tw/products/9786263332973?list_name=srh\">看完這本就會懂！帶你無痛提升 JavaScript 面試力</a></p>\n<p><a href=\"https://blog.huli.tw/2018/06/23/javascript-call-by-value-or-reference/\">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？</a></p>\n<p><a href=\"https://pjchender.blogspot.com/2016/03/javascriptby-referenceby-value.html\">[筆記] 談談 JavaScript 中 by reference 和 by value 的重要觀念</a></p>\n<p><a href=\"https://medium.com/@mengchiang000/js%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5-call-by-value-%E9%82%84%E6%98%AFreference-%E5%8F%88%E6%88%96%E6%98%AF-sharing-22a87ca478fc\">JS基本觀念：call by value 還是reference 又或是 sharing?</a></p>\n","text":"JavaScript 的資料型別在討論到傳值(Call by Value)或傳參考(Call by Reference)之前，我們先來了解 JavaScript...","permalink":"/post/js-value-or-reference","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":7,"path":"api/categories/前端.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"},{"name":"技術債","slug":"技術債","count":1,"path":"api/tags/技術債.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaScript-%E7%9A%84%E8%B3%87%E6%96%99%E5%9E%8B%E5%88%A5\"><span class=\"toc-text\">JavaScript 的資料型別</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%82%B3%E5%80%BC-Call-by-Value-%E3%80%81%E5%82%B3%E5%8F%83%E8%80%83-Call-by-Reference\"><span class=\"toc-text\">傳值(Call by Value)、傳參考 (Call by Reference)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%82%B3%E5%80%BC-Call-by-Value\"><span class=\"toc-text\">傳值(Call by Value)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%82%B3%E5%8F%83%E8%80%83-Call-by-Reference\"><span class=\"toc-text\">傳參考 (Call by Reference)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%A4%96%E8%B7%9F%E7%B5%90%E8%AB%96\"><span class=\"toc-text\">例外跟結論</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><span class=\"toc-text\">參考資料</span></a></li></ol>","author":{"name":"Billy's blog","slug":"blog-author","avatar":"https://i.imgur.com/6uC6FLI.png","link":"/","description":"留不下、帶不走什麼的人生，<br/>練習專注在當下","socials":{"github":"https://github.com/yaj55billy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"32歲的重新探索，帶來什麼體會？","uid":"39fce465be69f846db1f06abeac521ce","slug":"rediscover","date":"2023-10-26T16:00:00.000Z","updated":"2024-03-10T03:43:49.950Z","comments":true,"path":"api/articles/rediscover.json","keywords":null,"cover":"https://i.imgur.com/TdKOKwO.jpeg","text":" Photo by Emma Frances Logan on Unsplash 四月的提問與轉折生活中常會有高低起伏，狀況好的時候，我可以很專注在能做且該做的...","permalink":"/post/rediscover","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"生活","slug":"生活","count":5,"path":"api/categories/生活.json"}],"tags":[{"name":"生活","slug":"生活","count":5,"path":"api/tags/生活.json"},{"name":"隨筆","slug":"隨筆","count":2,"path":"api/tags/隨筆.json"}],"author":{"name":"Billy's blog","slug":"blog-author","avatar":"https://i.imgur.com/6uC6FLI.png","link":"/","description":"留不下、帶不走什麼的人生，<br/>練習專注在當下","socials":{"github":"https://github.com/yaj55billy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"六角學院 React 入門工作坊第四週（最終）","uid":"e517dd3c3a2180f60024bf64fe91a946","slug":"react-workshop-week4","date":"2023-08-30T16:00:00.000Z","updated":"2024-03-09T08:24:47.285Z","comments":true,"path":"api/articles/react-workshop-week4.json","keywords":null,"cover":"https://i.imgur.com/Zwb2dxR.jpg","text":"Photo by Lautaro Andreani on Unsplash 前言這週很有感的課程內容：React 的優點是體驗 JS 的美好，而缺點也是 JS ...","permalink":"/post/react-workshop-week4","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"25 mins."},"categories":[{"name":"前端","slug":"前端","count":7,"path":"api/categories/前端.json"}],"tags":[{"name":"六角學院","slug":"六角學院","count":4,"path":"api/tags/六角學院.json"},{"name":"React","slug":"React","count":4,"path":"api/tags/React.json"}],"author":{"name":"Billy's blog","slug":"blog-author","avatar":"https://i.imgur.com/6uC6FLI.png","link":"/","description":"留不下、帶不走什麼的人生，<br/>練習專注在當下","socials":{"github":"https://github.com/yaj55billy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}