<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TypeScript 型別註記與型別推論</title>
    <link href="/post/typescript-gradual-typing.html"/>
    <url>/post/typescript-gradual-typing.html</url>
    
    <content type="html"><![CDATA[<p>（TypeScript 的系列文，其說明跟範例都是跟著預設將嚴謹模式打開 <code>strict: true;</code>，如果將嚴謹模式關閉，則可能會跟以下說明與範例產生不同結果。畢竟我們已經在使用 TypeScript，就不建議把預設的嚴謹關掉哩！）</p><h2 id="在型別註記與推論之前"><a href="#在型別註記與推論之前" class="headerlink" title="在型別註記與推論之前"></a>在型別註記與推論之前</h2><p>在進入 TypeScript 的核心概念——型別註記與型別推論之前，我們先簡單探討靜態型別語言（Statically Typed）與動態型別語言（Dynamically Typed）的差異。</p><p>我們在學習 JavaScript 時，應該對這句話不陌生：「JavaScript 是動態型別語言，變數的型別會在程式執行期間才確定」。而動態型別語言的特色在於<strong>變數的型別會在程式執行時期（Run-time）根據賦予的值來決定</strong>，而不是在變數宣告時就確定其型別。這種類型的語言具有靈活性，但也可能帶來潛在的型別錯誤。</p><p>以下是一個簡單的 JavaScript 範例，說明動態型別的特性。在範例中我們可以將變數 <code>variable</code> 指派為不同的值，但要在程式執行時期才會知道其型別。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> variable = <span class="hljs-number">10</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> variable); <span class="hljs-comment">// 輸出: &quot;number&quot;</span><br><br>variable = <span class="hljs-string">&quot;Hello!&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> variable); <span class="hljs-comment">// 輸出: &quot;string&quot;</span><br><br>variable = <span class="hljs-literal">true</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> variable); <span class="hljs-comment">// 輸出: &quot;boolean&quot;</span><br></code></pre></td></tr></table></figure><p>靜態型別語言的特性則相對不同。靜態型別語言會在<strong>編譯時（Compilation）根據程式內宣告的型別來監控其狀態</strong>，這樣的特性可在編譯過程中，捕捉到潛在的型別錯誤。</p><p>以下是 C# 的一個簡單範例，說明靜態型別語言的特性。從範例中我們在 <code>number</code>、<code>text</code> 這兩個變數之前使用了 <code>int</code>、<code>string</code> 等文字來定義型別，所以像 <code>text = 555;</code> 這行就會在編譯時產生錯誤，因為 <code>text</code> 這個變數已經被定義是字串型別，不能賦予整數（數字）給它。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>  &#123;<br>    <span class="hljs-built_in">int</span> number = <span class="hljs-number">10</span>; <span class="hljs-comment">// 宣告一個整數型別的變數 number</span><br>    Console.WriteLine(<span class="hljs-string">&quot;Number: &quot;</span> + number);<br><br>    <span class="hljs-built_in">string</span> text = <span class="hljs-string">&quot;Hello, World!&quot;</span>;<br>    Console.WriteLine(<span class="hljs-string">&quot;Text: &quot;</span> + text);<br><br>    text = <span class="hljs-number">555</span>; <span class="hljs-comment">// 這行會在編譯時產生錯誤</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那麼 TypeScript 是屬於動態語言還是靜態語言呢？在這個系列的上一篇<a href="https://yaj55billy.github.io/post/typescript-common-types.html">TypeScript 基本型別</a>中，我們已經知道怎麼在變數加上型別宣告（如下範例），而這樣先以<strong>文字來宣告其型別，並且會監控其型別狀態</strong>的特性，可以知道 TypeScript 是有靜態語言的特性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">text</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;我是字串&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">30</span>;<br><br>text = <span class="hljs-number">30</span>; <span class="hljs-comment">// 會出錯</span><br>age = <span class="hljs-string">&quot;這是...&quot;</span>; <span class="hljs-comment">// 會出錯</span><br></code></pre></td></tr></table></figure><p>不過當我們嘗試把型別宣告（註記）給拔除，而把鼠標移動到變數上時，又能看出變數 <code>text</code> 的型別，而這樣<strong>根據賦予之值 <code>&quot;我是字串&quot;</code> 來推斷出型別</strong>，TypeScript 似乎也有動態型別的特性。（如下方範例跟圖片所示）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;我是字串&quot;</span>;<br><span class="hljs-keyword">let</span> age = <span class="hljs-number">30</span>;<br><br>text = <span class="hljs-number">30</span>; <span class="hljs-comment">// 依然會根據推斷，提到這樣不同的型別指派會出錯</span><br>age = <span class="hljs-string">&quot;這是...&quot;</span>; <span class="hljs-comment">// 依然會根據推斷，提到這樣不同的型別指派會出錯</span><br></code></pre></td></tr></table></figure><p><img src="/img/typescript-gradual-typing-1.png" alt="關於 TypeScript 型別推論"></p><p>基於以上內容，我們可以總結 TypeScript 同時有靜態語言跟動態語言的特性，而結合這兩種特性會被稱為<strong>漸進式型別系統（Gradual Typing）</strong>。當我們明確註記型別時，TypeScript 會像靜態型別語言，在編譯階段幫我們檢查型別並防止一些型別錯誤；而如果我們沒有註記型別時，TypeScript 則會根據賦予的值幫我們做型別推論，這類似動態型別語言的靈活性。</p><h2 id="型別註記（Type-Annotation）與型別推論（Type-Inference）"><a href="#型別註記（Type-Annotation）與型別推論（Type-Inference）" class="headerlink" title="型別註記（Type Annotation）與型別推論（Type Inference）"></a>型別註記（Type Annotation）與型別推論（Type Inference）</h2><p>在上個段落的討論中，我們探討了靜態語言跟動態語言的特性，並總結出 TypeScript 擁有這兩種特性（漸進式型別系統）。所以我們能在 TypeScript 的撰寫中，根據不同狀況去適當選擇<strong>嚴謹的型別註記</strong>，又或者我們能選擇<strong>靈活簡潔的型別推論</strong>。</p><p>這邊也引用&lt;讓 TypeScript 成為你全端開發的 ACE！&gt;這本書 P.1-13 對這兩者的定義：</p><blockquote><p>型別註記：為對變數或表達式進行文字敘述上的型別宣告動作。<br>型別推論：則是變數根據被賦予的值之型別來代表該變數之型別；而表達式則是經運算結果的值之型別來代表整個表達式最後的型別結果。</p></blockquote><p>接下來，我們將探討這兩者在不同情境下的使用，以及可能需要注意的部分。</p><h3 id="原始型別的註記跟推論"><a href="#原始型別的註記跟推論" class="headerlink" title="原始型別的註記跟推論"></a>原始型別的註記跟推論</h3><p>這個段落主要會來探討原始型別的推論，而原始型別註記的相關內容，因為比較單純些，所以這邊就不再多提及。相關內容可參考<a href="https://yaj55billy.github.io/post/typescript-common-types.html#%E5%8E%9F%E5%A7%8B%E5%9E%8B%E5%88%A5%EF%BC%88Primitive-Types%EF%BC%89">TypeScript 基本型別 - 原始型別</a>。</p><p>如下範例所示，即使我們沒有註記上型別，TypeScript 也會根據被賦予的值來推斷出型別：</p><ul><li>變數 <code>text</code> 會被推論為字串型別</li><li>變數 <code>age</code> 會被推論為數字型別</li><li>變數 <code>isTrue</code> 會被推論為布林型別</li><li>變數 <code>money</code> 會被推論為 null 型別</li><li>變數 <code>notAssigned</code> 會被推論為 undefined 型別</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;我是字串&quot;</span>;<br><span class="hljs-keyword">let</span> age = <span class="hljs-number">30</span>;<br><span class="hljs-keyword">let</span> isTrue = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">let</span> money = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">let</span> notAssigned = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><p>在 TypeScript 的環境上，即使型別是被「推論」出來，後續任何指派到該變數的值，也需符合該變數首次被推論出來的型別。如下方範例，<code>text</code> 被推論是字串型別，所以在 <code>text = 33</code> 這樣的指派時會出現錯誤訊息：<code>Type &#39;number&#39; is not assignable to type &#39;string&#39;.</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;我是字串&quot;</span>; <span class="hljs-comment">// 被推論是字串型別</span><br>text = <span class="hljs-string">&quot;這是一句話&quot;</span>; <span class="hljs-comment">// 這樣是 OK 的</span><br>text = <span class="hljs-number">33</span>; <span class="hljs-comment">// Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span><br></code></pre></td></tr></table></figure><p>然而，如果變數在宣告時沒有被賦予任何值，TypeScript 的編譯器就無法推論其型別，因此會用 <code>any</code> 型別來代替。<code>any</code> 型別意味著這個變數可以被賦予任何型別，而不會產生型別相關錯誤。這種情況稱為「遲滯性指派」。如下範例跟圖片所示：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> num; <span class="hljs-comment">// 會被推斷是 any 型別</span><br><br><span class="hljs-comment">// 以下指派都不會有錯誤，因為 any 型別</span><br>num = <span class="hljs-number">123</span>;<br>num = <span class="hljs-string">&quot;字串&quot;</span>;<br>num = <span class="hljs-literal">true</span>;<br>num = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><p><img src="/img/typescript-gradual-typing-2.png" alt="遲滯性指派的 any 型別"></p><p>在這個段落的結尾之前，我們來看看被推論成聯合型別的狀況。當變數的型別推論，遇到一些判斷（條件敘述、三元運算）而有所不同時，TypeScript 編譯器會幫我們根據判斷的不同狀況，分別推論匯集成聯合型別。如下範例所示，<code>unionValue</code> 變數會被推論為 <code>string | number</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> unionValue = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.5</span> ? <span class="hljs-string">&quot;我是字串&quot;</span> : <span class="hljs-number">200</span>;<br><span class="hljs-comment">// TypeScript 會推論 unionValue 的型別為 string | number</span><br></code></pre></td></tr></table></figure><h3 id="物件型別的註記跟推論"><a href="#物件型別的註記跟推論" class="headerlink" title="物件型別的註記跟推論"></a>物件型別的註記跟推論</h3><h4 id="物件的型別推論"><a href="#物件的型別推論" class="headerlink" title="物件的型別推論"></a>物件的型別推論</h4><p>首先我們先來討論物件的型別推論，如下範例跟圖片，當我們把滑鼠移動到 <code>user</code> 時，會看到 TypeScript 幫我們推論出物件的結構跟各個屬性型別。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> user = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Billy&quot;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">33</span>,<br><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br><span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/img/typescript-gradual-typing-3.png" alt="物件的型別推論"></p><p>對於這樣的推論，我們接續著探討如果對於物件內屬性的值做調整，或者去調整（覆寫）整個物件時，會發生什麼狀況？</p><p>對於物件內屬性值的調整，需符合原先定義的型別，所以 <code>user.name = 333</code> 會出現錯誤：<code>Type &#39;number&#39; is not assignable to type &#39;string&#39;.</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> user = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Billy&quot;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">33</span>,<br><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br><span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>&#125;;<br><br>user.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;John&quot;</span>;<br>user.<span class="hljs-property">name</span> = <span class="hljs-number">333</span>; <span class="hljs-comment">// Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span><br></code></pre></td></tr></table></figure><p>而整個物件的覆寫，如果符合原先物件結構跟屬性型別，則不會有錯誤；但如果在原先的結構定義，有少或多了屬性，TypeScript 會提醒我們有錯誤，例如少了 <code>age</code> 屬性時，將會得到這一串錯誤訊息：<code>Property &#39;age&#39; is missing in type &#39;&#123; name: string; gender: string; isActive: false; &#125;&#39; but required in type &#39;&#123; name: string; age: number; gender: string; isActive: boolean; &#125;&#39;.</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> user = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Billy&quot;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">33</span>,<br><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br><span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>&#125;;<br><br>user = &#123;<br><span class="hljs-comment">// 這樣是 OK 的</span><br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Eve&quot;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,<br><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br><span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>,<br>&#125;;<br><br>user = &#123;<br><span class="hljs-comment">// 多或少了屬性，則會有錯誤提醒</span><br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Eve&quot;</span>,<br><span class="hljs-comment">// age: 40,</span><br><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br><span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-comment">// mail: &quot;xxx@gmail.com&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>在物件的型別推論中，最後我們來看刪除屬性的狀況。當我們想刪除 <code>user.name</code> 時會出現這樣的錯誤訊息：<code>The operand of a &#39;delete&#39; operator must be optional.</code>，告訴我們這屬性必須要是可選的，這個部分將在稍後補充。</p><p>（目前這篇文章的 TypeScript 版本為 5.6，在版本 4 之前，這樣刪除物件中某個屬性的動作，並不會出現錯誤提醒，而刪除後再次查看這個屬性時，也不會如預期是 <code>undefined</code> 型別，<strong>這是滿奇怪的地方</strong>；而版本 4.x 之後，TypeScript 有對這個部分做調整，關於這個部分可參考<a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-0/">Announcing TypeScript 4.0</a>）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> user = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Billy&quot;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">33</span>,<br><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br><span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>&#125;;<br><br><span class="hljs-keyword">delete</span> user.<span class="hljs-property">name</span>; <span class="hljs-comment">// The operand of a &#x27;delete&#x27; operator must be optional.</span><br></code></pre></td></tr></table></figure><h4 id="物件的型別註記"><a href="#物件的型別註記" class="headerlink" title="物件的型別註記"></a>物件的型別註記</h4><p>再來要討論物件型別的註記部分，如下方範例所示，這樣的型別註記方式我們應該不陌生。<br>這邊也補充一個小細節，在寫 JavaScript 的物件時，每一行屬性跟值我們是以「逗號」作為分隔；而在 TypeScript 先定義物件結構跟屬性時，使用分號或逗號都是被允許的。（我自己目前在學習是比較偏好分號，可以跟原先物件做個區隔）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">user</span>: &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 這邊用分號或逗號都可以</span><br><span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br><span class="hljs-attr">gender</span>: <span class="hljs-built_in">string</span>;<br><span class="hljs-attr">isActive</span>: <span class="hljs-built_in">boolean</span>;<br>&#125; = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Billy&quot;</span>, <span class="hljs-comment">// 這邊一定要逗號</span><br><span class="hljs-attr">age</span>: <span class="hljs-number">33</span>,<br><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br><span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>而對於物件內屬性的值做調整，或者要覆寫整個物件時，這個部分與物件型別的推論是一樣的。</p><ul><li>對於物件內屬性值的調整，需符合原先屬性所定義的型別。</li><li>對於整個物件的覆寫，如果符合原先物件結構跟屬性所定義的型別，則不會產生錯誤。</li></ul><p>如下範例所示，這邊就不再贅述：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">user</span>: &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br><span class="hljs-attr">gender</span>: <span class="hljs-built_in">string</span>;<br><span class="hljs-attr">isActive</span>: <span class="hljs-built_in">boolean</span>;<br>&#125; = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Billy&quot;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">33</span>,<br><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br><span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>&#125;;<br><br>user.<span class="hljs-property">age</span> = <span class="hljs-number">40</span>; <span class="hljs-comment">// 這樣是 OK 的！</span><br>user.<span class="hljs-property">age</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// Type &#x27;boolean&#x27; is not assignable to type &#x27;number&#x27;.</span><br><br>user = &#123;<br><span class="hljs-comment">// 結構跟型別與原先ㄧ致，所以是 OK 的！</span><br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br><span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>,<br>&#125;;<br><br>user = &#123;<br><span class="hljs-comment">// Property &#x27;age&#x27; is missing in type &#x27;&#123; name: string; gender: string; isActive: false; &#125;&#x27; but required in type &#x27;&#123; name: string; age: number; gender: string; isActive: boolean; &#125;&#x27;</span><br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br><span class="hljs-comment">// 少了 age 屬性（多了屬性或少了屬性都會出現錯誤）</span><br><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br><span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>在物件型別的註記中，最後要來討論刪除屬性的部分。稍早在物件型別的推論，如果我們想刪除物件某個屬性（例如：<code>user.name</code>），則會出現要把這個<strong>屬性設置為可選</strong>的錯誤訊息，這個部分在物件型別的註記也是一樣的。</p><p>而當我們將某個物件屬性加上可選後，對這個屬性做 <code>delete</code> 就不會出現錯誤。以下方範例的 <code>user.name</code> 來說，加上可選屬性後，TypeScript 會幫我們做聯集型別，允許是原先的字串型別，或者是未定義的 <code>undefined</code>（如下方截圖）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">user</span>: &#123;<br>name?: <span class="hljs-built_in">string</span>;<br><span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br><span class="hljs-attr">gender</span>: <span class="hljs-built_in">string</span>;<br><span class="hljs-attr">isActive</span>: <span class="hljs-built_in">boolean</span>;<br>&#125; = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Billy&quot;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">33</span>,<br><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br><span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>&#125;;<br><br><span class="hljs-keyword">delete</span> user.<span class="hljs-property">name</span>; <span class="hljs-comment">// 這邊就不會出現錯誤</span><br><br><span class="hljs-comment">// 沒問題的狀況</span><br>user.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;John&quot;</span>;<br>user.<span class="hljs-property">name</span> = <span class="hljs-literal">undefined</span>;<br><br><span class="hljs-comment">// 錯誤設置</span><br>user.<span class="hljs-property">name</span> = <span class="hljs-number">33</span>; <span class="hljs-comment">// Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span><br>user.<span class="hljs-property">name</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// Type &#x27;boolean&#x27; is not assignable to type &#x27;string&#x27;.</span><br></code></pre></td></tr></table></figure><p><img src="/img/typescript-gradual-typing-4.png" alt="物件屬性加上可選"></p><h3 id="函式型別的註記跟推論"><a href="#函式型別的註記跟推論" class="headerlink" title="函式型別的註記跟推論"></a>函式型別的註記跟推論</h3><p>關於函式型別的註記跟推論，主要會分為參數（輸入）以及回傳值（輸出）兩個部分。如果我們都沒有進行型別註記，在大多數狀況下，TypeScript 會無條件將函式的參數<strong>推論為 any 型別</strong>，而函式的回傳值則會看 <strong>return 敘述式回傳結果值的型別</strong>。</p><h4 id="函式型別的推論"><a href="#函式型別的推論" class="headerlink" title="函式型別的推論"></a>函式型別的推論</h4><p>如果函式沒有任何參數參與，則 TypeScript 會單純根據 return 敘述回傳值的型別來做推斷。<br>特別提及下方範例的第三個跟第四個函式，如果函式內沒有 return 字樣，或者單純只有 return 而沒有帶上回傳值時，我們會看到 <code>void</code> 來表示函式回傳結果為空（無意義），如：<code>function logMessage() :void</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandomNumber</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// function getRandomNumber(): number</span><br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFilterValue</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// function getFilterValue(): string | number</span><br><span class="hljs-keyword">const</span> value = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br><br><span class="hljs-keyword">if</span> (value &gt; <span class="hljs-number">0.5</span>) &#123;<br><span class="hljs-keyword">return</span> value; <span class="hljs-comment">// 回傳數字結果</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> value.<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">// 回傳字串結果</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">logMessage</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// function logMessage() :void</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;沒有輸出，僅僅只是 log 一些訊息&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">returnEmpty</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// function returnEmpty() :void</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如下方範例，當函式有參數但沒有被註記型別時，TypeScript 會出現這樣的錯誤訊息來提醒我們：<code>Parameter &#39;input&#39; implicitly has an &#39;any&#39; type.</code>，也就是 input 參數被隱含成 any 型別。函式參數（輸入）在本質上是無法被推論的，因為參數的型別是由開發者所定義。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">echo</span>(<span class="hljs-params">input</span>) &#123;<br><span class="hljs-keyword">return</span> input;<br>&#125;<br><br><span class="hljs-comment">// function echo(input: any): any</span><br><span class="hljs-title function_">echo</span>(<span class="hljs-number">123</span>);<br><span class="hljs-title function_">echo</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-title function_">echo</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br></code></pre></td></tr></table></figure><p><img src="/img/typescript-gradual-typing-5.png" alt="函式參數沒有註記型別"></p><h4 id="函式型別的註記"><a href="#函式型別的註記" class="headerlink" title="函式型別的註記"></a>函式型別的註記</h4><p>如上個段落所提，如果函式的參數（輸入）沒有被註記時，在大多數狀況會無條件被推論成 any 型別，而如果這個部分不加以限縮，則容易造成一些錯誤發生，所以建議函式參數要註記型別；而函式的回傳值（輸出）是看 return 所回傳的結果值，這個部分可以看狀況來決定要主動註記或者讓 TypeScript 推論。</p><p>這邊也再複習一下，關於函式型別的註記，以下這幾種方式都能讓函式被註記成：<code>(a: number, b: number) =&gt; number</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">addFn</span>: <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><br><span class="hljs-keyword">let</span> addFn2 = <span class="hljs-keyword">function</span> (<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addFn3</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>關於函式的回傳值是否要註記，這個部分是看狀況而定，像是函式是否複雜、回傳值是否為 any 型別、團隊習慣考量等等。<br>引用上方範例的 <code>addFn3</code> 函式來說，因為回傳的是數字相加的結果，而參數也有註記為數字，所以像這樣單純的函式，其回傳值就可以讓 TypeScript 幫我們推論。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addFn3</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) &#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>這邊也模擬一下，如果是函式內容稍複雜的狀況，就可以考慮註記上型別。<br>（這邊主要是提及概念，因為這個範例其實還是能讓 TypeScript 幫我們去推論出來，<del>抱歉暫時沒想到更好的範例</del>）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">transformData</span>(<span class="hljs-params">input: <span class="hljs-built_in">number</span>[]</span>): <span class="hljs-built_in">string</span>[] | <span class="hljs-literal">null</span> &#123;<br><span class="hljs-keyword">if</span> (input.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> input.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">num</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">`負數: <span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.abs(num)&#125;</span>`</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">`正數: <span class="hljs-subst">$&#123;num&#125;</span>`</span>;<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>最後也引用&lt;讓 TypeScript 成為你全端開發的 ACE！&gt;一書的作者 Maxwell 大大提到他自己的開發習慣：「開發時會盡量註記函式的輸出型別，而函式在實踐完成後，如果沒有太多功能要擴充或改寫的需求，而且函式在命名上的辨識度夠高時，就會主動將該函式的輸出型別拔除，讓 TypeScript 來處理推論」（書頁 3-39）</p><h3 id="陣列型別的註記跟推論"><a href="#陣列型別的註記跟推論" class="headerlink" title="陣列型別的註記跟推論"></a>陣列型別的註記跟推論</h3><p>因為這個段落所要提及的內容較少，所以會將陣列型別的註記跟推論一起討論。</p><p>如下範例所示，在第一個範例的推論是容易理解的；而第二個範例當我們在陣列塞入各種型別時，TypeScript 會將出現的各種型別都聯集在一起。<br>像第一個範例這樣只存放單個型別，稱為同質性陣列；而第二個範例這樣放不同型別，稱為異質性陣列。大多在開發上，都是以同質性陣列為主，畢竟異質性陣列還需根據不同型別做判斷跟處理。（我目前在開發上，也還沒遇過異質性陣列的狀況）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 推論 &gt;&gt; const fruits: string[];</span><br><span class="hljs-keyword">const</span> fruits = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-string">&quot;elderberry&quot;</span>];<br><br><span class="hljs-comment">// 推論 &gt;&gt; const arr: (string | number | boolean | number[])[]</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">123</span>, <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-literal">false</span>, [<span class="hljs-number">222</span>, <span class="hljs-number">333</span>]];<br></code></pre></td></tr></table></figure><p>另外在空陣列的狀況，如果我們沒有註記則會被 TypeScript 推論成 <code>any[]</code>，因此為了避免這個狀況，會建議先進行註記哩。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// const emptyArr: any[]</span><br><span class="hljs-keyword">const</span> emptyArr = [];<br><br><span class="hljs-comment">// 有註記</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">emptyArr</span>: <span class="hljs-built_in">number</span>[] = [];<br></code></pre></td></tr></table></figure><h3 id="何時使用註記？何時使用推論？"><a href="#何時使用註記？何時使用推論？" class="headerlink" title="何時使用註記？何時使用推論？"></a>何時使用註記？何時使用推論？</h3><table><thead><tr><th>項目</th><th><strong>型別註記</strong></th><th><strong>型別推論</strong></th></tr></thead><tbody><tr><td>定義</td><td>明確指定變數、參數或回傳值的型別</td><td>TypeScript 根據賦予的值自動推斷型別</td></tr><tr><td>優點</td><td>型別明確、安全</td><td>簡潔</td></tr><tr><td>缺點</td><td>過度使用會造成程式碼冗長</td><td>需依賴推斷，可能會有意外的型別錯誤</td></tr><tr><td>使用情境</td><td>明確的 API 或複雜的邏輯，需確保型別正確無誤時使用</td><td>簡單且容易推斷的區域變數或型別明顯時使用</td></tr><tr><td>補充</td><td>函式的參數必須要註記，不然會讓輸入參數是 any 型別</td><td>從變數名稱，上下文等可以很快看出型別，則可使用推論</td></tr></tbody></table><p>TypeScript 是來補足 JavaScript 不夠嚴謹的部分，那麼如果站在嚴謹的角度，我們是不是乾脆 100% 使用註記呢？</p><p>雖然我們可以這麼做，但這樣會讓程式碼少了彈性，以及導致程式的可讀性變很差；關於註記跟推論的選擇，我們可以根據不同狀況，<strong>考量程式可讀、維護性、TypeScript 型別的特性、團隊習慣等</strong>，來判斷何時適當使用註記，而何時讓程式自己推論即可。而這個部分我覺得實際在團隊用 TypeScript 開發時就會越來越清楚了。</p><h2 id="結語（感想）"><a href="#結語（感想）" class="headerlink" title="結語（感想）"></a>結語（感想）</h2><p>寫這篇文章時，比預期花的時間還久了幾天，看到內容所累積的字數時也嚇了一跳。本來還想提到型別斷言的內容，但考量到篇幅以及手頭待整理的筆記，決定先將這個整理斷言內容的進度往後推。</p><p>如果沒記錯的話，好幾年前就買了&lt;讓 TypeScript 成為你全端開發的 ACE！&gt;這本書，但後來就都一直放在書架上；直到最近在學習 TypeScript 以及整理成文章時才開始認真翻閱，滿推薦想學 TypeScript 的開發者，可以來翻閱這本書，內容整理的很有條理跟易於了解。</p><p>最後想特別說，近期維持前端內容的輸出後，才深刻體會到這樣的知識輸出對於提升很有幫助。一方面是前端硬技能，另一方面則是將知識重新構建跟整理的軟技能，而後者這樣的軟技能，應該也適用在多個領域中。</p><p>參考資料：</p><ul><li>六角學院 TypeScript 30 天課程</li><li>書籍：<a href="https://www.tenlong.com.tw/products/9789864344895?list_name=srh">&lt;讓 TypeScript 成為你全端開發的 ACE！&gt;</a></li></ul><hr><p>Photo by <a href="https://unsplash.com/@safarslife?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Safar Safarov</a> on <a href="https://unsplash.com/photos/turned-on-gray-laptop-computer-MSN8TFhJ0is?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a></p>]]></content>
    
    
    <categories>
      
      <category>前端 TypeScript 系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什麼是資料庫？</title>
    <link href="/post/what-database.html"/>
    <url>/post/what-database.html</url>
    
    <content type="html"><![CDATA[<h2 id="資料庫的概念與應用"><a href="#資料庫的概念與應用" class="headerlink" title="資料庫的概念與應用"></a>資料庫的概念與應用</h2><blockquote><p><strong>資料庫</strong>（英語：database），簡而言之可視為<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E5%8C%96">數位化</a>的<a href="https://zh.wikipedia.org/wiki/%E6%A1%A3%E6%A1%88%E6%9F%9C">檔案櫃</a>——儲存電子<a href="https://zh.wikipedia.org/wiki/%E6%AA%94%E6%A1%88">檔案</a>的處所，使用者可以對<a href="https://zh.wikipedia.org/wiki/%E6%AA%94%E6%A1%88">檔案</a>中的資料執行新增、擷取、更新、刪除等操作<a href="https://zh.wikipedia.org/zh-tw/%E6%95%B0%E6%8D%AE%E5%BA%93#cite_note-1">[1]</a>。<br>所謂「資料庫」是以<strong>一定方式</strong>儲存在一起、能予多個使用者<a href="https://zh.wikipedia.org/wiki/%E5%85%B1%E4%BA%AB">共享</a>、具有儘可能小的<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%86%97%E4%BD%99">冗餘度</a>、與應用程式彼此獨立的資料<a href="https://zh.wikipedia.org/wiki/%E9%9B%86%E5%90%88_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">集合</a>。一個資料庫由多個表空間（<a href="https://zh.wikipedia.org/wiki/Tablespace">Tablespace</a>）構成。</p></blockquote><p>以上是維基百科對於資料庫（Database）的定義。<br>比較簡單來說，資料庫是一個專門儲存資料的地方，這些資料可以是文字、圖片、數據等，而我們也可以透過一些方式，對這些資料進行讀取、新增、更新和刪除的操作。</p><p>我們可以從生活常見的情境來說，不論是在瀏覽社交平台的訊息，或者在使用電商網站購物時，這些過程看到的許多資料，像是會員操作、好友動態、購物訂單等，這些操作的背後都有資料庫在默默地工作（儲存、操作資料），所以沒有資料庫的話，這些功能將無法順利運作。</p><h2 id="資料庫管理系統（DBMS）與資料庫"><a href="#資料庫管理系統（DBMS）與資料庫" class="headerlink" title="資料庫管理系統（DBMS）與資料庫"></a>資料庫管理系統（DBMS）與資料庫</h2><p>在上個段落中，我們了解到資料庫是資料儲存的地方。而想要有效率地管理、查詢和操作這些資料，我們就會需要資料庫管理系統（Database Management，DBMS）來協助。</p><p><img src="/img/what-database-1.png" alt="資料庫管理系統(DBMS)與資料庫譬喻"></p><p>如上圖所示，我們可以把資料庫管理系統跟資料庫做個譬喻，將資料庫想像為一個「圖書館」，而資料庫管理系統就如同「圖書館的管理員」。</p><p>圖書館這個空間中，儲存了許多書籍（資料），但還需要有圖書館管理員（系統）來協助我們查找書籍、借書還書、管理書籍的位置等。比如說，當借閱者想找某本書，我們只需詢問圖書館管理員，他就能幫我們找出這本書在哪個書架。</p><h2 id="關聯式資料庫（Relational-Database）與非關聯式資料庫（Non-Relational-Database）"><a href="#關聯式資料庫（Relational-Database）與非關聯式資料庫（Non-Relational-Database）" class="headerlink" title="關聯式資料庫（Relational Database）與非關聯式資料庫（Non-Relational Database）"></a>關聯式資料庫（Relational Database）與非關聯式資料庫（Non-Relational Database）</h2><p>資料庫的類型會根據使用情境不同而有所區分，最常見的分類有：關聯式資料庫與非關聯式資料庫，而接下來將會分別討論這兩者。</p><h3 id="關聯式資料庫（Relational-Database）"><a href="#關聯式資料庫（Relational-Database）" class="headerlink" title="關聯式資料庫（Relational Database）"></a>關聯式資料庫（Relational Database）</h3><p>在關聯式資料庫中，是以表格（table）為基礎來組織跟管理資料的，每個表格由欄位（columns）和資料列（rows）組成，欄位定義了資料的屬性，而每一個資料列則代表一筆紀錄，在表格與表格間可以透過鍵值來建立<strong>關聯</strong>。常見的關聯式資料庫系統有：MySQL、PostgreSQL、SQL Server 等。</p><p>關聯式資料庫特點：</p><ul><li>歷史悠久且穩定：關聯式資料庫從 1970 年被提出並開始發展，而經過多年的發展跟廣泛運用，它的架構已相當成熟且穩定。</li><li>結構化資料：資料以結構化的方式儲存，每一筆資料都必須符合事先定義好的欄位規範（Schema）。</li><li>使用 SQL 操作：關聯式資料庫主要使用 SQL（Structured Query Language）進行資料的操作，SQL 是一個標準化的查詢語言，在不同的關聯式資料庫系統是通用的。</li><li>彈性較低：由於資料結構事先被嚴謹定義，所以當資料需求發生變動時（例如添加或修改欄位），需要考慮的因素比較多，像是會不會影響到現有資料或其他關聯的資料表等。</li><li>強一致性：關聯式資料庫強調資料的一致性，任何變動都會即時反應在資料庫中，我們能看到最新、最正確的資訊。以網購下訂單來做譬喻，當我們下訂單後查詢訂單狀態時，會看到的就是剛剛下的訂單，不會有延遲或錯誤。</li></ul><p>關聯式資料庫的表格示意：類似於下方這樣的表格結構跟資料，會在關聯式資料庫中不斷看到。</p><table><thead><tr><th>username</th><th>email</th><th>created_at(資料創建時間)</th></tr></thead><tbody><tr><td>Alice</td><td><a href="mailto:&#97;&#108;&#105;&#x63;&#101;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;">&#97;&#108;&#105;&#x63;&#101;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;</a></td><td>2024-10-11 10:15:30</td></tr><tr><td>Bob</td><td><a href="mailto:&#x62;&#111;&#x62;&#64;&#x65;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#46;&#99;&#x6f;&#109;">&#x62;&#111;&#x62;&#64;&#x65;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#46;&#99;&#x6f;&#109;</a></td><td>2024-10-10 14:45:00</td></tr><tr><td>Charlie</td><td><a href="mailto:&#99;&#x68;&#97;&#114;&#108;&#105;&#101;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;">&#99;&#x68;&#97;&#114;&#108;&#105;&#101;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;</a></td><td>2024-10-09 09:30:15</td></tr></tbody></table><h3 id="非關聯式資料庫（Non-Relational-Database）"><a href="#非關聯式資料庫（Non-Relational-Database）" class="headerlink" title="非關聯式資料庫（Non-Relational Database）"></a>非關聯式資料庫（Non-Relational Database）</h3><p>非關聯式資料庫又稱為 NoSQL（Not Only SQL）資料庫，它在資料的儲存是比較靈活簡單的，我們可以直接對 NoSQL 寫入資料，而不需要先定義好欄位，也適合處理大量而且多樣化的資料。常見的非關聯式資料庫系統有：MongoDB、Cassandra、Redis 等。</p><p>非關聯式資料庫的特點：</p><ul><li>靈活彈性處理資料：非關聯式資料庫在設計上，可以不用事先定義結構，因此在需要擴展或修改資料時，會更為靈活跟彈性。</li><li>不同的資料操作方式：在關聯式資料庫的操作上，是使用 SQL 語法。而非關聯式資料庫，會根據不同的資料庫類型，而有不同的操作方式，像是 Document 形式、Key value、圖形 Graph 等等。</li><li>高度擴展性：非關聯式資料庫適合處理結構不固定的大數據，能夠輕鬆地進行水平擴展，在多個伺服器之間分散儲存資料。當資料需求發生變動時，無需像關聯式資料庫那樣重新設計表格，擴展相對簡單。</li><li>弱一致性：在非關聯式資料庫中，資料更新並不會立即同步到所有節點（伺服器），而是會在一段時間後達到資料的一致，這樣的方式可避免每次有資料寫入時，都需要等待所有節點同步，確保操作速度更快。</li></ul><p>非關聯式資料庫示意：<br>這邊以 MongoDB 這個系統來做示意，它是以 Document 格式儲存，如下範例所示，我們在第一筆資料中沒有 <code>profile_pic</code> 的欄位跟資料，可是在第二筆資料中，又可因應需求而加上，不需被事先定義給限制，這種彈性在非關聯式資料庫中是很常見的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;64f9b08b6aee&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Alice&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;alice@example.com&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-10-11T10:15:30Z&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;64f9b08b7ffe&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bob&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bob@example.com&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-10-10T14:45:00Z&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;profile_pic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bob_pic.jpg&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="關聯式資料庫與非關聯式資料庫（總結）"><a href="#關聯式資料庫與非關聯式資料庫（總結）" class="headerlink" title="關聯式資料庫與非關聯式資料庫（總結）"></a>關聯式資料庫與非關聯式資料庫（總結）</h3><p>關聯式資料庫以表格儲存結構化資料，使用 SQL 語法操作，適合需要高一致性與嚴謹資料結構的情境，如<strong>金融交易、電子商務</strong>等。而非關聯式資料庫無需事先定義結構，具有彈性、高擴展跟較快的讀寫能力，適合處理大筆且多變的資料情境，如<strong>社群媒體、即時通訊</strong>等。</p><p>關聯式資料庫與非關聯式資料庫有各自的特點跟適合場景，我們可以根據需求而做選擇。有些特殊狀況中，也會在專案同時使用這兩種資料庫。</p><h2 id="結語（感想）"><a href="#結語（感想）" class="headerlink" title="結語（感想）"></a>結語（感想）</h2><p>幾年前在工作需求上，曾經小小接觸過關聯式資料庫系統 MySQL，不過需求是比較簡單的，單純將使用者表單資料給送到資料庫中，所以對於資料庫的很多觀念是不熟悉的，那時也沒有去補起來（<del>技術債</del>）。這個前端到後端的系列，想再多學習一些後端、資料庫的知識，並且做個紀錄。因年初到年中這段時間，有在六角學院 Node 入門班接觸到非關聯式 MongoDB；所以這個系列會先以關聯式資料庫出發，而這個系列第二篇的預期內容是：使用 SQL 來操作資料的 CRUD。</p><p>本來寫這篇文章時，有個預期是想把蒐集到的資訊，用更簡單口語的方式表達出來，不過目前功力還不太夠。透過這樣的刻意學習，確實有讓自己多看懂，試著接觸一些本來不太想看的資訊，也算是收穫滿滿哩 XD…</p><p>主要參考資料：</p><ul><li><a href="https://zh.wikipedia.org/zh-tw/%E6%95%B0%E6%8D%AE%E5%BA%93">維基百科</a></li><li><a href="https://ithelp.ithome.com.tw/m/articles/10318313">Ray - Node.js 不負責系列 Day9 What is a database？</a></li><li><a href="https://arc.net/l/quote/zxcgbzcm">mysql.tw 資料庫 vs 資料庫管理系統</a></li><li><a href="https://www.youtube.com/watch?v=S8AiU1GZByE&ab_channel=%E5%9C%96%E8%A7%A3%E7%A8%8B%E5%BC%8F%E6%95%99%E5%AD%B8SamTsai">圖解程式教學 Sam Tsai - NoSQL vs RDS 資料庫哪個適合你？</a></li><li><a href="https://www.youtube.com/watch?v=AbDh-ky8pbk&ab_channel=%E5%AE%87%E5%85%88%E7%A8%8B%E5%BC%8F">宇先程式 - 簡單認識 SQL &amp; NoSQL 資料庫</a></li></ul><hr><p>Photo by <a href="https://unsplash.com/@safarslife?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Safar Safarov</a> on <a href="https://unsplash.com/photos/turned-on-gray-laptop-computer-MSN8TFhJ0is?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a></p>]]></content>
    
    
    <categories>
      
      <category>前端到後端系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>資料庫</tag>
      
      <tag>關聯式資料庫</tag>
      
      <tag>非關聯式資料庫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript 基本型別</title>
    <link href="/post/typescript-common-types.html"/>
    <url>/post/typescript-common-types.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這一篇文章，主要來筆記 TypeScript 的基本型別；在進到正式內容前，也先透過一個簡單範例，來說明 TypeScript 是怎麼幫助我們減少開發錯誤的。</p><p>以原本 JavaScript 變數的特性來說，它可以被賦予任何的資料型態，在程式不複雜時，這樣的自由跟彈性比較不會帶來什麼問題；但如果程式開始變複雜時，就容易會有意外的狀況（Bug）。如下範例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在這個函式中，我們期望回傳「數字」相加的結果</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addFn</span>(<span class="hljs-params">a, b</span>) &#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-number">5</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">addFn</span>(a, b)); <span class="hljs-comment">// 這邊會如我們預期，是數字與數字相加的結果 10+5 = 15</span><br><br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// ...假設經歷很長的程式碼（程式變得複雜）</span><br><br>a = <span class="hljs-string">&quot;10&quot;</span>; <span class="hljs-comment">// 不小心將 a 變數型別設定成「字串」</span><br><br><span class="hljs-comment">// 當我們要再次運算時，&quot;10&quot; + 5 就會被轉型成字串 &quot;105&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">addFn</span>(a, b));<br></code></pre></td></tr></table></figure><p>從上方範例中，我們可以看到程式碼偏離了預期（數字相加、回傳數字），而這樣就會導致開發的錯誤。</p><p>使用 TypeScript 來撰寫，就可以明確指定函式的 a、b 參數都必須是 number 型別，而回傳結果也是 number 型別，來達到數字相加的預期結果；如果我們將參數傳入不同型別（例如：字串），在編譯過程或者 VSCode 的功能上，就會提醒我們出現錯誤。而這樣的型別設置，就能在「開發階段」時就提醒我們型別出現錯誤了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addFn</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br><span class="hljs-comment">// 參數型別、函式回傳型別都設置成 number</span><br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">b</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">5</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">addFn</span>(a, b)); <span class="hljs-comment">// 預期結果 10+5=15</span><br><br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// ...假設經歷很長的程式碼（程式變得複雜）</span><br><br><span class="hljs-comment">// 如果不小心設置 a 為字串，在編譯時就會報錯。</span><br>a = <span class="hljs-string">&quot;10&quot;</span>; <span class="hljs-comment">// Error: Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.</span><br></code></pre></td></tr></table></figure><h2 id="原始型別（Primitive-Types）"><a href="#原始型別（Primitive-Types）" class="headerlink" title="原始型別（Primitive Types）"></a>原始型別（Primitive Types）</h2><p>在 JavaScript 中有七種原始型別，分別是：</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Null</li><li>Undefined</li><li>Symbol：ES6&#x2F;2015 才有，可用於建立獨一無二的值</li><li>BigInt：ES11&#x2F;2020 才有，用於數值非常大的狀況<br>（Symbol、BigInt 基本會較少使用到，我自己目前在專案開發中也沒有用過）</li></ul><p>宣告變數加上 TypeScript 的型別定義時，規則是這樣的：<code>let 變數名稱:資料型態 = 資料</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// String</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">text</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;我是字串&quot;</span>; <span class="hljs-comment">// 資料型態小寫就可以了</span><br><br><span class="hljs-comment">// Number</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">30</span>;<br>age = <span class="hljs-number">40</span>; <span class="hljs-comment">// 這樣如同預期設置的數字型別，不會產生錯誤</span><br>age = <span class="hljs-string">&quot;我年齡是...&quot;</span>; <span class="hljs-comment">// 這樣就會產生 編譯錯誤</span><br><br><span class="hljs-comment">// Boolean</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">isTrue</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;<br>isTrue = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 這樣如同預期設置的布林型別，不會產生錯誤</span><br>isTrue = <span class="hljs-string">&quot;true&quot;</span>; <span class="hljs-comment">// 這樣就會產生 編譯錯誤</span><br><br><span class="hljs-comment">// Null</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">money</span>: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">// Undefined</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">notAssigned</span>: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;<br><br><span class="hljs-comment">// Symbol</span><br><span class="hljs-comment">// 使用 Symbol() 時，內部會建立一個獨特的 id，即使是兩個 key 相同，也是代表不相等的</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">dataKey1</span>: <span class="hljs-built_in">symbol</span> = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;my-data-key&quot;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-attr">dataKey2</span>: <span class="hljs-built_in">symbol</span> = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;my-data-key&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataKey1 === dataKey2); <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// BigInt</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">bigNumber</span>: <span class="hljs-built_in">bigint</span> = <span class="hljs-title class_">BigInt</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_SAFE_INTEGER</span>);<br></code></pre></td></tr></table></figure><h2 id="陣列型別（Array-Type）"><a href="#陣列型別（Array-Type）" class="headerlink" title="陣列型別（Array Type）"></a>陣列型別（Array Type）</h2><p>陣列型別可以用來定義一組相同型別的元素。TypeScript 提供兩種常見的語法來做定義：</p><ul><li><code>let 變數名稱: 型別[] = 陣列資料</code></li><li><code>let 變數名稱: Array&lt;型別&gt; = 陣列資料</code>：這種方式是使用泛型來定義，這邊可約略先知道有這樣的方式，而關於泛型這個概念的詳細，會在後面章節補充。</li></ul><p>第一種語法範例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">numbers</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <span class="hljs-comment">// 定義一個 number 型別的陣列</span><br>numbers.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">// OK</span><br>numbers.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;5&quot;</span>); <span class="hljs-comment">// 陣列內的項目型別，需符合我們定義好的型別。所以這邊 push 的字串型別會出現錯誤。</span><br></code></pre></td></tr></table></figure><p>第二種語法範例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">fruits</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">string</span>&gt; = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>]; <span class="hljs-comment">// 定義一個 string 型別的陣列</span><br>fruits.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;Orange&quot;</span>); <span class="hljs-comment">// OK</span><br>fruits.<span class="hljs-title function_">push</span>(<span class="hljs-number">123</span>); <span class="hljs-comment">// 這樣會報錯，因為 123 不是字串</span><br></code></pre></td></tr></table></figure><p>TypeScript 支援多維陣列的方式，如下方範例的二維陣列（內容補充）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">weeklyMenu</span>: <span class="hljs-built_in">string</span>[][] = [[<span class="hljs-string">&quot;Chicken&quot;</span>], [<span class="hljs-string">&quot;Beef&quot;</span>], [<span class="hljs-string">&quot;Fish&quot;</span>]];<br><br><span class="hljs-comment">// 嘗試推入一個數字會報錯</span><br>weeklyMenu.<span class="hljs-title function_">push</span>([<span class="hljs-number">33</span>]); <span class="hljs-comment">// Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="元組型別（Tuple-Type）"><a href="#元組型別（Tuple-Type）" class="headerlink" title="元組型別（Tuple Type）"></a>元組型別（Tuple Type）</h3><p>元組是 TypeScript 中的一種特殊陣列，它與一般陣列不同的是，元組這個概念允許我們在陣列中包含「不同型別」的元素，但每個元素的型別和順序都是被嚴格定義的（陣列長度也是）。</p><p>範例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">person</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>, <span class="hljs-built_in">boolean</span>];<br>person = [<span class="hljs-string">&quot;Billy&quot;</span>, <span class="hljs-number">35</span>, <span class="hljs-literal">true</span>]; <span class="hljs-comment">// OK</span><br><br><span class="hljs-comment">// 錯誤</span><br>person = [<span class="hljs-number">123</span>, <span class="hljs-number">35</span>, <span class="hljs-literal">true</span>]; <span class="hljs-comment">// 第一個 123 數字型別不符合我們所定義的（字串）</span><br>person = [<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">30</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">111</span>]; <span class="hljs-comment">// 陣列長度超出原先定義的，所以這樣也會報錯</span><br>person = [<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">30</span>]; <span class="hljs-comment">// 這樣也是錯誤的</span><br></code></pre></td></tr></table></figure><p>如果有遇到特殊狀況，需要明確定義資料結構的順序和型別時，也許就會使用到元組這個概念。<br>（不過目前思考了過去專案，這樣狀況應該是不常見低～）</p><h2 id="物件型別（Object-Type）"><a href="#物件型別（Object-Type）" class="headerlink" title="物件型別（Object Type）"></a>物件型別（Object Type）</h2><p>物件型別可以用來定義物件的結構，確保每個屬性都有正確的型別。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">user</span>: &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br><span class="hljs-attr">gender</span>: <span class="hljs-built_in">string</span>;<br><span class="hljs-attr">isActive</span>: <span class="hljs-built_in">boolean</span>;<br>&#125; = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Billy&quot;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">33</span>,<br><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br><span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">name</span>); <span class="hljs-comment">// Billy</span><br>user.<span class="hljs-property">age</span> = <span class="hljs-number">35</span>; <span class="hljs-comment">// 這樣不會出錯，因為 35 這個值是數字型別</span><br><br><span class="hljs-comment">// 會出錯</span><br>user.<span class="hljs-property">age</span> = <span class="hljs-string">&quot;我的年齡是35&quot;</span>;<br>user.<span class="hljs-property">phone</span> = <span class="hljs-string">&quot;0900-999-999&quot;</span>; <span class="hljs-comment">// 這樣會出錯，因為並沒有定義 phone 屬性</span><br></code></pre></td></tr></table></figure><h3 id="選擇性屬性（Optional-Properties）"><a href="#選擇性屬性（Optional-Properties）" class="headerlink" title="選擇性屬性（Optional Properties）"></a>選擇性屬性（Optional Properties）</h3><p>有時我們並不需要每個屬性都是「必須」提供的，像是有些資訊可以依照使用者需求（喜好）來提供，這時我們可以使用 <code>?</code> 來讓某些屬性變為選擇性屬性。</p><p>user 相關範例如下，因為我們將 <code>phoneNumber?</code> 多設置了選擇性屬性，所以不論在 user1 沒有提供 <code>phoneNumber</code> 的資訊，或者 user2 有提供 <code>phoneNumber</code> 的資訊，都不會出現 TypeScript 的相關警告。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">user1</span>: &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;<br><span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>phoneNumber?: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 這邊將 phoneNumber 設置為選擇性屬性</span><br>&#125; = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John Doe&quot;</span>,<br><span class="hljs-attr">email</span>: <span class="hljs-string">&quot;john@example.com&quot;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>&#125;;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">user2</span>: &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br><span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;<br><span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>phoneNumber?: <span class="hljs-built_in">string</span>;<br>&#125; = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Jane Smith&quot;</span>,<br><span class="hljs-attr">email</span>: <span class="hljs-string">&quot;jane@example.com&quot;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">28</span>,<br><span class="hljs-attr">phoneNumber</span>: <span class="hljs-string">&quot;0987-654321&quot;</span>,<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user1.<span class="hljs-property">phoneNumber</span>); <span class="hljs-comment">// undefined，因為 user1 沒有提供電話號碼</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user2.<span class="hljs-property">phoneNumber</span>); <span class="hljs-comment">// &quot;0987-654321&quot;</span><br></code></pre></td></tr></table></figure><h3 id="唯讀屬性（Readonly-Properties）"><a href="#唯讀屬性（Readonly-Properties）" class="headerlink" title="唯讀屬性（Readonly Properties）"></a>唯讀屬性（Readonly Properties）</h3><p>除了在物件使用選擇性屬性，TypeScript 也提供了 <code>readonly</code> 關鍵字，讓某些屬性只能讀取，不能再修改。</p><p>範例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">point</span>: &#123;<br><span class="hljs-keyword">readonly</span> <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">readonly</span> <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span>;<br>&#125; = &#123;<br><span class="hljs-attr">x</span>: <span class="hljs-number">10</span>,<br><span class="hljs-attr">y</span>: <span class="hljs-number">20</span>,<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(point.<span class="hljs-property">x</span>); <span class="hljs-comment">// 10</span><br><br>point.<span class="hljs-property">x</span> = <span class="hljs-number">15</span>; <span class="hljs-comment">// 這樣會出錯，因為 x 是唯讀屬性</span><br></code></pre></td></tr></table></figure><h2 id="函式型別（Function-Type）"><a href="#函式型別（Function-Type）" class="headerlink" title="函式型別（Function Type）"></a>函式型別（Function Type）</h2><p>在函式型別中，我們可以定義函式的輸入（參數）以及輸出型別，避免一些意外的型別錯誤。當我們定義函式型別時，會使用 <code>:</code> 來指定型別。</p><h3 id="函式陳述式（Function-Declaration）"><a href="#函式陳述式（Function-Declaration）" class="headerlink" title="函式陳述式（Function Declaration）"></a>函式陳述式（Function Declaration）</h3><p>下方範例是陳述式函式的定義，由這樣的定義可確保：</p><ul><li>a 和 b 參數必須是 <code>number</code> 型別</li><li>函式回傳值必須是 <code>number</code> 型別</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-title function_">sum</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>); <span class="hljs-comment">// 正確，輸出 30</span><br><span class="hljs-title function_">sum</span>(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-number">20</span>); <span class="hljs-comment">// 錯誤，因為 &quot;10&quot; 是字串型別</span><br></code></pre></td></tr></table></figure><h3 id="函式表達式（Function-Expression）"><a href="#函式表達式（Function-Expression）" class="headerlink" title="函式表達式（Function Expression）"></a>函式表達式（Function Expression）</h3><p>函式表達式也是常見的定義方式，將函式作為值指派到變數中。範例如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> sum2 = <span class="hljs-keyword">function</span> (<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span> &#123;<br><span class="hljs-keyword">return</span> a * b;<br>&#125;;<br></code></pre></td></tr></table></figure><p>不過以上的寫法，其 sum2 這個變數是透過「推論」出來的，關於「推論」這個概念，將會在 TypeScript 系列的下一篇提到。簡單來說，當我們沒有對變數明確定義型別時，TypeScript 會幫我們根據內容去推論出型別。</p><p>如果要更明確定義 sum2 的型別，可以如下範例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">sum2</span>: <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br><span class="hljs-keyword">return</span> a * b;<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>(a: number, b: number) =&gt; number</code> 在這邊的寫法上，我們會看到「箭頭」的方式來表示回傳的型別，因為前面 sum2 變數已經有使用到 <code>:</code>，所以為了不混淆，這邊是使用箭頭的方式。<strong>需注意這個箭頭的方式，跟 ES6 的箭頭函式是完全沒有關係的。</strong><br><del>（剛開始看到這樣的寫法時，我覺得滿混亂的。）</del></p><h2 id="聯合型別（Union-Types）"><a href="#聯合型別（Union-Types）" class="headerlink" title="聯合型別（Union Types）"></a>聯合型別（Union Types）</h2><p>聯合型別使用 | 運算符表示變數或參數可以接受多種可能的型別。<br>範例如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>; <span class="hljs-comment">// id 變數可以是字串或數字型別</span><br>id = <span class="hljs-string">&quot;a12345&quot;</span>; <span class="hljs-comment">// OK</span><br>id = <span class="hljs-number">12345</span>; <span class="hljs-comment">// OK</span><br><br>id = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 錯誤：Type &#x27;boolean&#x27; is not assignable to type &#x27;string | number&#x27;.</span><br></code></pre></td></tr></table></figure><p>假設某個情境，我們需要對不同型別的輸入，分別做不同的處理時，就能在函式的參數中使用聯合型別，然後再配合 <code>typeof</code> 判斷。如下範例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">processInput</span>(<span class="hljs-params">input: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | <span class="hljs-built_in">boolean</span></span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> input === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`輸入的字串長度：<span class="hljs-subst">$&#123;input.length&#125;</span>`</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> input === <span class="hljs-string">&quot;number&quot;</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`輸入的數字平方：<span class="hljs-subst">$&#123;input * input&#125;</span>`</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`輸入的布林值：<span class="hljs-subst">$&#123;input ? <span class="hljs-string">&quot;真&quot;</span> : <span class="hljs-string">&quot;假&quot;</span>&#125;</span>`</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-title function_">processInput</span>(<span class="hljs-string">&quot;Hello&quot;</span>); <span class="hljs-comment">// 輸出：輸入的字串長度：5</span><br><span class="hljs-title function_">processInput</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">// 輸出：輸入的數字平方：16</span><br><span class="hljs-title function_">processInput</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 輸出：輸入的布林值：真</span><br><br><span class="hljs-title function_">processInput</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]); <span class="hljs-comment">// 錯誤：Argument of type &#x27;number[]&#x27; is not assignable to parameter of type &#x27;string | number | boolean&#x27;.</span><br></code></pre></td></tr></table></figure><h2 id="任意型別（Any）"><a href="#任意型別（Any）" class="headerlink" title="任意型別（Any）"></a>任意型別（Any）</h2><p>如果變數被定義 any 這個型別，則表示它可以是任何型別；不過既然我們撰寫 TypeScript 就是為了對型別的處理更為嚴謹，所以使用 any 需特別謹慎，也比較不建議使用哩。</p><p>有幾個情境，可以謹慎使用 any 型別（過渡）：</p><ul><li>當從外部 API 獲取的資料結構不明確，或者有可能變化時</li><li>資料狀況比較複雜，無法在初期準確定義型別時</li><li>從 JavaScript 專案遷移到 TypeScript 的過渡期</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">any</span> = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// any 可以是任何型別，所以以下的設置都不會有錯</span><br>a = <span class="hljs-literal">true</span>;<br>a = <span class="hljs-string">&quot;Hello~&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>以上是 TypeScript 系列的第二篇，筆記跟整理了基本型別。在這個系列的第三篇內容，預計是要來說 TypeScript 的核心概念：註記與推論。</p><p>參考資料：</p><ul><li>六角學院 TypeScript 30 天課程</li><li>書籍：<a href="https://www.tenlong.com.tw/products/9789864344895?list_name=srh">&lt;讓 TypeScript 成為你全端開發的 ACE！&gt;</a></li></ul><hr><p>Photo by <a href="https://unsplash.com/@safarslife?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Safar Safarov</a> on <a href="https://unsplash.com/photos/turned-on-gray-laptop-computer-MSN8TFhJ0is?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a></p>]]></content>
    
    
    <categories>
      
      <category>前端 TypeScript 系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript 學習的開始</title>
    <link href="/post/typescript-start.html"/>
    <url>/post/typescript-start.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先前就意會到該要來學習 TypeScript，畢竟以前端的大環境來說，不論在主流的三大框架、開發工具、企業需求等，都能看到 TypeScript 越來越普遍的趨勢。而以企業需求來說，現在 Junior 的職缺技能要求，也會看到 TypeScript 或者會列在加分項目。<br>（<del>不過我這學習真的是拖延了許久</del>）</p><h2 id="TypeScript-的優勢"><a href="#TypeScript-的優勢" class="headerlink" title="TypeScript 的優勢"></a>TypeScript 的優勢</h2><p>簡單來說，TypeScript 是 JavaScript 的強化版，能在相對自由的 JavaScript 語法補充「型別」，增添開發的嚴謹。</p><ol><li>靜態型別檢查、減少錯誤：使開發者能在編譯時，就先看到錯誤並做調整，不會在程式執行時才發生問題，提高程式碼的可靠性跟可維護性。（現在以 VSCode 來說，甚至還不用編譯時，編輯器就幫我們點出錯誤）</li><li>兼容 JavaScript：目前寫的 JavaScript 程式碼可直接無痛遷移到 TypeScript，然後再逐步調整。簡單來說我們可以在 .ts 撰寫一般的 JavaScript。</li><li>支援 ECMAScript 新功能：開發者能直接使用 JavaScript 的最新特性，而不用等到瀏覽器支援。</li><li>有益於團隊配合：型別定義可以更清楚程式碼（變數、函式）的用途，有助於團隊成員更快理解彼此撰寫的程式碼。</li></ol><h2 id="安裝-TypeScript-與小試身手"><a href="#安裝-TypeScript-與小試身手" class="headerlink" title="安裝 TypeScript 與小試身手"></a>安裝 TypeScript 與小試身手</h2><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p>安裝 TypeScript 之前需要先下載 Node。</p><p>可以將 TypeScript 只安裝在專案，也可以安裝在全局。差異在於 tsc 指令只能在某個專案內的終端機使用，或者在任何位置的終端機都能使用。</p><p>安裝在專案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install typescript --save-dev<br></code></pre></td></tr></table></figure><p>安裝在全局：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install typescript -g<br></code></pre></td></tr></table></figure><h3 id="編譯"><a href="#編譯" class="headerlink" title="編譯"></a>編譯</h3><p>因為瀏覽器無法直接讀取 TypeScript 檔案（.ts），所以我們需要把 TypeScript 編譯為 JavaScript 檔案（.js）。我們可以透過 <code>tsc</code> 語法來進行編譯，例如在終端機輸入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tsc index.ts<br></code></pre></td></tr></table></figure><p>透過以上指令，我們就能將 <code>index.ts</code> 編譯成 <code>index.js</code>，而這個檔案就能被瀏覽器讀取哩。</p><h3 id="小試身手"><a href="#小試身手" class="headerlink" title="小試身手"></a>小試身手</h3><p>我們現在有一支 hello.ts 檔案，內容為：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">person: <span class="hljs-built_in">string</span></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">`Hello, <span class="hljs-subst">$&#123;person&#125;</span>!`</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> user = <span class="hljs-string">&quot;Billy&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">greet</span>(user));<br></code></pre></td></tr></table></figure><p>如下圖所示，當我們在終端機輸入 <code>tsc hello.ts</code> 時，就會幫我們產生一支編譯好的 <code>hello.js</code>。<br><img src="/img/typescript-start-1.png" alt="hello.ts編譯為hello.js"></p><h2 id="TypeScript-Config-File"><a href="#TypeScript-Config-File" class="headerlink" title="TypeScript Config File"></a>TypeScript Config File</h2><p>透過在終端機輸入 <code>npx tsc --init</code>，能讓我們在專案新增一支 tsconfig.json。<br>而這支檔案的相關設置，可以讓 TypeScript 編譯器（tsc）知道要怎麼處理專案中的 TypeScript 程式，例如要編譯哪些檔案、編譯後的 JavaScript 版本等。（我們可以根據專案需求來修改）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx tsc --init<br></code></pre></td></tr></table></figure><p>幾個常見的設定項目及用途：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ES6&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 要編譯成哪個 JavaScript 版本（例如：ES6）</span><br><span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CommonJS&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 預設使用 CommonJS 模組系統</span><br><span class="hljs-attr">&quot;strict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 嚴格模式，預設是開啟的</span><br><span class="hljs-attr">&quot;outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 編譯後的檔案要放的位置</span><br><span class="hljs-attr">&quot;sourceMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-comment">// 生成對應的 source map</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src/**/*&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 要編譯的檔案位置，以目前這個設置來說，是指 src 資料夾中的所有檔案</span><br><span class="hljs-attr">&quot;exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;node_modules&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;dist&quot;</span><span class="hljs-punctuation">]</span> <span class="hljs-comment">// 編譯要排除的資料夾，以這個設置來說會去忽略 node_modules 和 dist 資料夾</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="腳手架工具"><a href="#腳手架工具" class="headerlink" title="腳手架工具"></a>腳手架工具</h2><p>在目前的前端開發中，使用腳手架工具（例如 Vite、Create React App）是相當常見的，這類工具幫我們配置許多環境設置，讓我們可以專注在程式碼的撰寫，而不太需要（或很少）去配置相關設定。</p><p>而使用這類工具時，我們也不需要再手動輸入 <code>npx tsc --init</code> 來生成 tsconfig.json 檔案，因為它已經在專案初始化時，幫我們做好相關配置。除此之外，也會幫我們處理編譯相關，所以我們也不需要手動去執行 <code>tsc xxx.ts</code> 這類指令，工具會幫我們處理這個部分。</p><p>舉例來說，當我們透過 Vite 初始化一個 React（TypeScript）專案時，它就會自動生成 tsconfig.json，並預設好各種配置選項，我們只需要根據需求去調整或增減設定即可。如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ES2020&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;useDefineForClassFields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;lib&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;ES2020&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;DOM&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;DOM.Iterable&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESNext&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;skipLibCheck&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><br><span class="hljs-comment">/* Bundler mode */</span><br><span class="hljs-attr">&quot;moduleResolution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bundler&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;allowImportingTsExtensions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;isolatedModules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;moduleDetection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;force&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;noEmit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react-jsx&quot;</span><span class="hljs-punctuation">,</span><br><br><span class="hljs-comment">/* Linting */</span><br><span class="hljs-attr">&quot;strict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;noUnusedLocals&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;noUnusedParameters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;noFallthroughCasesInSwitch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><hr><p>Photo by <a href="https://unsplash.com/@safarslife?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Safar Safarov</a> on <a href="https://unsplash.com/photos/turned-on-gray-laptop-computer-MSN8TFhJ0is?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a></p>]]></content>
    
    
    <categories>
      
      <category>前端 TypeScript 系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重新開始吧，關於前端職涯（短文）</title>
    <link href="/post/restart-frontend.html"/>
    <url>/post/restart-frontend.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這陣子一直覺得自己在前端工程師的職涯中，有一種「腳踩不到地」的感覺，這種感覺滿悶跟令人低潮的。</p><p>昨天拿起了紙筆，開始探索過去的前端工作經歷，有曾經待過的公司，或者是面試覺得喜歡但後來沒有選擇的公司，在這覆盤的過程中，找出自己的一些問題點。</p><h2 id="問題點是什麼？"><a href="#問題點是什麼？" class="headerlink" title="問題點是什麼？"></a>問題點是什麼？</h2><h3 id="眼高手低"><a href="#眼高手低" class="headerlink" title="眼高手低"></a>眼高手低</h3><p>曾經有一段時間，因為在工作經歷、面試中嚐到了甜頭，而有了這樣的壞習慣。它讓我在那段時間沒有看到自己的不足，也錯過了一個不錯的工作機會。</p><h3 id="急躁、急於求成"><a href="#急躁、急於求成" class="headerlink" title="急躁、急於求成"></a>急躁、急於求成</h3><p>這也不僅僅是前端生涯就有的問題。過去沒有好好靜下來探索過，自己真正想要的是什麼；而把焦點放在要達成某個成就，而最後我了解到，這求的是一場空，因為不是自己冷靜下來觀察跟探索的，而只是社會要我們成為的樣子。</p><p>然後也造成了不務實、沒有好好接地，忽略了技能都是需要時間堆疊的。</p><h3 id="害怕與逃避"><a href="#害怕與逃避" class="headerlink" title="害怕與逃避"></a>害怕與逃避</h3><p>常常守在舊有的模式，不自覺會逃避新的機會，而最可怕的是會默默被包裝在思考中，變成乍看之下有所思考，或者這個決定是要捍衛自己信念，但這些只是為了逃避而創造的假象（故事）。</p><h2 id="結論與方向"><a href="#結論與方向" class="headerlink" title="結論與方向"></a>結論與方向</h2><p>透過這覆盤讓我了解到，原來夠痛的話，也會催化自己的不同視角，直接去深入面對那些黑暗面。而在這時代的快速變遷，以及一些自己可能的偏好中，我無法知道會待在這個領域多久，畢竟人生是無常的；而現在能做的，就是重新面對過去所留下的，以及更有覺知的去看待這些黑暗面。</p><p>把這些整理出來後，心情也放鬆下來了。配合自己最重視的五個價值觀，我也擬定出接下來要專注的幾個面項，因為時間跟身體能量是有限的，然後觀察看看距離 2025 剩不到 100 天，可以有什麼變化跟累積。</p><p>Photo by <a href="https://unsplash.com/@hayabussa?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">mahamudul hasan</a> on <a href="https://unsplash.com/photos/silhouette-of-person-standing-on-seashore-during-sunset-tn-UC3YKRzU?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongoDB 資料庫（資料表操作）</title>
    <link href="/post/mongod-mongosh.html"/>
    <url>/post/mongod-mongosh.html</url>
    
    <content type="html"><![CDATA[<!-- :::tip關於 **mongoDB 資料庫與資料表操作**用自己的口語再次筆記練習::: --><h2 id="前置操作"><a href="#前置操作" class="headerlink" title="前置操作"></a>前置操作</h2><p>（需要先安裝 MongoDB、Mongo Shell、MongoDB Compass）</p><h3 id="使用-mongod-開啟伺服器應用（資料庫）"><a href="#使用-mongod-開啟伺服器應用（資料庫）" class="headerlink" title="使用 mongod 開啟伺服器應用（資料庫）"></a>使用 mongod 開啟伺服器應用（資料庫）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mongod --dbpath `db資料夾路徑` --logpath `<span class="hljs-built_in">log</span>資料夾路徑`<br></code></pre></td></tr></table></figure><h3 id="mongosh：造訪資料庫，並做一些應用（新增、刪除、修改…）"><a href="#mongosh：造訪資料庫，並做一些應用（新增、刪除、修改…）" class="headerlink" title="mongosh：造訪資料庫，並做一些應用（新增、刪除、修改…）"></a>mongosh：造訪資料庫，並做一些應用（新增、刪除、修改…）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mongosh<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/VZGNBQh.png" alt="mongosh"></p><h3 id="show-dbs：呈現現有資料庫（一開始預設是三個）"><a href="#show-dbs：呈現現有資料庫（一開始預設是三個）" class="headerlink" title="show dbs：呈現現有資料庫（一開始預設是三個）"></a>show dbs：呈現現有資料庫（一開始預設是三個）</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tsx">show dbs<br></code></pre></td></tr></table></figure><h3 id="use-來使用某個資料庫"><a href="#use-來使用某個資料庫" class="headerlink" title="use 來使用某個資料庫"></a>use 來使用某個資料庫</h3><p>如果沒有這個資料庫，則會直接幫我們新增，並移動到這個資料庫</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">use `資料庫名稱`<br>// use hotel<br></code></pre></td></tr></table></figure><hr><h2 id="資料表操作單筆、多筆資料-document"><a href="#資料表操作單筆、多筆資料-document" class="headerlink" title="資料表操作單筆、多筆資料(document)"></a>資料表操作單筆、多筆資料(document)</h2><h3 id="insert-相關"><a href="#insert-相關" class="headerlink" title="insert 相關"></a>insert 相關</h3><p><strong>insertOne 新增單筆資料：</strong> 在 posts 這個資料表中，新增一筆資料(document)，這筆資料有七個欄位（如果一開始沒有 posts 這個資料表，則會在輸入指令時幫我們新增）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.insertOne(&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Billy&quot;</span>,<br>    <span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;https://dummyimage.com/248x100.png/dddddd/000000&quot;</span>,<br>    <span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;我是貼文內容，20240304新增&quot;</span>,<br>    <span class="hljs-string">&quot;likes&quot;</span>:50,<br>    <span class="hljs-string">&quot;comment&quot;</span>:30,<br>    <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;group&quot;</span>,<br>    <span class="hljs-string">&quot;tags&quot;</span>:[<span class="hljs-string">&quot;心情&quot;</span>,<span class="hljs-string">&quot;教育&quot;</span>],<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>insertMany 新增多筆資料：</strong>在 posts 這個資料表中，新增兩筆資料(document)，每筆資料有七個欄位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.insertMany([<br>&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Billy2&quot;</span>,<br>    <span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;https://dummyimage.com/248x100.png/dddddd/000000&quot;</span>,<br>    <span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;我是貼文內容222，20240304新增&quot;</span>,<br>    <span class="hljs-string">&quot;likes&quot;</span>:80,<br>    <span class="hljs-string">&quot;comment&quot;</span>:60,<br>    <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;group&quot;</span>,<br>    <span class="hljs-string">&quot;tags&quot;</span>:[<span class="hljs-string">&quot;心情&quot;</span>,<span class="hljs-string">&quot;教育&quot;</span>],<br>  &#125;,<br>    &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Billy3&quot;</span>,<br>    <span class="hljs-string">&quot;image&quot;</span>:<span class="hljs-string">&quot;https://dummyimage.com/248x100.png/dddddd/000000&quot;</span>,<br>    <span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;我是貼文內容333，20240304新增&quot;</span>,<br>    <span class="hljs-string">&quot;likes&quot;</span>:500,<br>    <span class="hljs-string">&quot;comment&quot;</span>:300,<br>    <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;group&quot;</span>,<br>    <span class="hljs-string">&quot;tags&quot;</span>:[<span class="hljs-string">&quot;心情&quot;</span>,<span class="hljs-string">&quot;教育&quot;</span>],<br>  &#125;<br>])<br></code></pre></td></tr></table></figure><h3 id="Update-相關"><a href="#Update-相關" class="headerlink" title="Update 相關"></a>Update 相關</h3><p><strong>updateOne 修改單筆資料：</strong>在 posts 這個資料表中，根據條件篩選出的一筆資料(document)，進行欄位的調整。下方範例是將篩選出的資料(document)，將 content 欄位的值調整為”測試資料”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.updateOne(<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>:ObjectId(<span class="hljs-string">&quot;xxxxxxxxx...&quot;</span>)&#125;, // 條件篩選<br>    &#123;<span class="hljs-variable">$set</span>:&#123;<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;測試資料&quot;</span>&#125;&#125;<br>)<br></code></pre></td></tr></table></figure><p>篩選一筆特定資料(document)，將裡頭的 tags 陣列欄位，再新增一個新 tags</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.updateOne(<br>&#123;<span class="hljs-string">&quot;_id&quot;</span>:ObjectId(<span class="hljs-string">&quot;65dcxxx...&quot;</span>)&#125;<br>,&#123;<span class="hljs-variable">$push</span>:&#123;tags:<span class="hljs-string">&quot;遊記&quot;</span>&#125;&#125;)<br><br>// 驗證<br>// db.posts.find(&#123;<br>   // <span class="hljs-string">&quot;_id&quot;</span>:ObjectId(<span class="hljs-string">&quot;65dcxxx...&quot;</span>)<br>// &#125;)<br><br></code></pre></td></tr></table></figure><p><strong>updateMany 修改多筆資料：</strong>在 posts 這個資料表中，去篩選出多筆 name 欄位為”abc123”的資料(document)，並將這些資料的 content 欄位都調整成”測試”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.updateMany(<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;abc123&quot;</span>&#125;,<br>  &#123;<span class="hljs-variable">$set</span>:&#123;<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;測試&quot;</span>&#125;&#125;<br>)<br><br></code></pre></td></tr></table></figure><p>使用 updateMany 來移除欄位，下方範例是將 tags 陣列的”感情” tag 都移除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.updateMany(<br>  &#123; <span class="hljs-string">&quot;tags&quot;</span>: <span class="hljs-string">&quot;感情&quot;</span> &#125;,<br>  &#123; <span class="hljs-variable">$pull</span>: &#123; <span class="hljs-string">&quot;tags&quot;</span>: <span class="hljs-string">&quot;感情&quot;</span> &#125; &#125;<br>)<br><br></code></pre></td></tr></table></figure><h3 id="delete-相關"><a href="#delete-相關" class="headerlink" title="delete 相關"></a>delete 相關</h3><p><strong>deleteOne 刪除單筆資料：</strong>在 posts 這個資料表中，去篩選 id 為 aaa123 的資料(document)，然後將之刪除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.deleteOne(<br>  &#123;<span class="hljs-string">&quot;_id&quot;</span>:ObjectId(<span class="hljs-string">&quot;aaa123&quot;</span>)&#125;<br>)<br><br></code></pre></td></tr></table></figure><p><strong>deleteMany 刪除多筆資料：</strong>將 type: group 這個條件中的多筆資料都刪除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.deleteMany(<br>  &#123;<br>    <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;group&quot;</span> // 條件<br>  &#125;<br>)<br><br></code></pre></td></tr></table></figure><p>多個條件：將名字為 abc，以及 likes 數量 500(含) 以下都刪除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.deleteMany(<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;abc&quot;</span>,<br>    <span class="hljs-string">&quot;likes&quot;</span>:&#123;<br>      <span class="hljs-variable">$lte</span>: 500 // <span class="hljs-variable">$lte</span> 表示小於等於<br>    &#125;<br>  &#125;<br>)<br><br></code></pre></td></tr></table></figure><p>不寫任何條件，等同於刪除全部資料</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.deleteMany(&#123;&#125;)<br></code></pre></td></tr></table></figure><h3 id="find-相關"><a href="#find-相關" class="headerlink" title="find 相關"></a>find 相關</h3><p>查詢全部 posts 的資料列表(document)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.find()<br>db.posts.find().pretty()<br></code></pre></td></tr></table></figure><p>模糊搜尋：name 欄位含有 o 的資料列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.find(<br>  &#123;<span class="hljs-string">&quot;name&quot;</span>:/o/&#125;<br>)<br><br></code></pre></td></tr></table></figure><p>單個條件：查詢 comments 有大於等於 500 以上的資料列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.find(<br>  &#123;<br>    <span class="hljs-string">&quot;comments&quot;</span>: &#123;<br>        <span class="hljs-variable">$gte</span>:500<br>    &#125;,<br>  &#125;<br>)<br><br></code></pre></td></tr></table></figure><p>查詢 image 欄位為 null 的資料列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.find(&#123;<br>  <span class="hljs-string">&quot;image&quot;</span>: null<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>多個條件：name 欄位為 abc123，按讚數大於等於 500、小於等於 1000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.find(<br>  &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;abc123&quot;</span>,<br>    <span class="hljs-string">&quot;likes&quot;</span>: &#123;<br>        <span class="hljs-variable">$gte</span>:500, // <span class="hljs-variable">$gte</span> 大於等於<br>        <span class="hljs-variable">$lte</span>:1000 // <span class="hljs-variable">$lte</span> 小於等於<br>    &#125;,<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><p>project 保護欄位：查詢 tags 欄位中，有包含到”幹話”的資料列表，然後將 _id 欄位設置隱藏（在有些狀況中，我們不可透露重要資訊在 user）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.find(<br>  &#123;<br>    <span class="hljs-string">&quot;tags&quot;</span>: &#123;<br>      <span class="hljs-variable">$in</span>: [<span class="hljs-string">&#x27;幹話&#x27;</span>] // <span class="hljs-variable">$in</span> 表示內容存在某個值<br>    &#125;<br>  &#125;,<br>  &#123;<span class="hljs-string">&quot;_id&quot;</span>: 0&#125; // 將 <span class="hljs-built_in">id</span> 欄位隱藏<br>)<br><br></code></pre></td></tr></table></figure><p>查詢 tags 欄位，有 謎因 或(or) 幹話 的資料列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.find(<br>  &#123;<br>    <span class="hljs-string">&quot;tags&quot;</span>: &#123;<br>      <span class="hljs-variable">$in</span>: [<span class="hljs-string">&#x27;謎因&#x27;</span>,<span class="hljs-string">&#x27;幹話&#x27;</span>]<br>    &#125;<br>  &#125;<br>)<br><br></code></pre></td></tr></table></figure><p>find 的 $and 與 $or：<br>在 posts 資料表中，找尋 likes 跟(and) comments 欄位都大於等於 1500 以上的資料列表（<a href="https://www.runoob.com/mongodb/mongodb-query.html">參考連結</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.find(&#123;<br>  <span class="hljs-variable">$and</span>: [<br>    &#123; <span class="hljs-string">&quot;likes&quot;</span>: &#123; <span class="hljs-variable">$gte</span>: 1500 &#125; &#125;,<br>    &#123; <span class="hljs-string">&quot;comments&quot;</span>: &#123; <span class="hljs-variable">$gte</span>: 1500 &#125; &#125;<br>  ]<br>&#125;)<br><br>//db.posts.find(&#123; 這個範例也可以這樣寫<br>  //<span class="hljs-string">&quot;likes&quot;</span>: &#123; <span class="hljs-variable">$gte</span>: 1500 &#125;,<br>  //<span class="hljs-string">&quot;comments&quot;</span>: &#123; <span class="hljs-variable">$gte</span>: 1500 &#125;<br>//&#125;)<br></code></pre></td></tr></table></figure><p>在 posts 資料表中，找尋 likes 或(or) comments 欄位中，大於等於 1000 以上的資料列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.find(&#123;<br>  <span class="hljs-variable">$or</span>: [<br>    &#123; <span class="hljs-string">&quot;likes&quot;</span>: &#123; <span class="hljs-variable">$gte</span>: 1000 &#125; &#125;,<br>    &#123; <span class="hljs-string">&quot;comments&quot;</span>: &#123; <span class="hljs-variable">$gte</span>: 1000 &#125; &#125;<br>  ]<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>顯示 posts 資料表的資料筆數（數字）（<a href="https://www.mongodb.com/docs/manual/reference/method/db.collection.countDocuments/">參考連結</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.countDocuments()<br></code></pre></td></tr></table></figure><p>查詢 name 欄位為 abc123 的資料列表，而這個排序從新到舊（<a href="https://www.runoob.com/mongodb/mongodb-sort.html">參考連結</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.find(<br>  &#123; <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;abc123&quot;</span> &#125; // 查詢條件<br>).<span class="hljs-built_in">sort</span>(<br>  &#123; <span class="hljs-string">&quot;createdAt&quot;</span>: -1 &#125; // 根據 createdAt 欄位進行降序排序 (由新到舊)<br>)<br><br></code></pre></td></tr></table></figure><p>查詢 name 欄位為 abc123 的資料列表，只顯示前 30 筆資料（<a href="https://www.runoob.com/mongodb/mongodb-limit-skip.html">參考連結</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.find(<br>  &#123; <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;abc123&quot;</span> &#125; // 查詢條件<br>).<span class="hljs-built_in">limit</span>(30) // 限制返回結果為前 30 筆資料<br><br></code></pre></td></tr></table></figure><p>查詢 name 欄位為 abc123、likes 欄位大於等於 100 的資料列表。而這個資料列表只需顯示前 30 筆，並且對於這資料列表做新到舊的排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.find(<br>  &#123; // 條件<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;abc123&quot;</span>,<br>    <span class="hljs-string">&quot;likes&quot;</span>: &#123;<br>        <span class="hljs-variable">$gte</span>:100,<br>    &#125;<br>  &#125;<br>).<span class="hljs-built_in">limit</span>(30).<span class="hljs-built_in">sort</span>( &#123;<span class="hljs-string">&quot;createdAt&quot;</span>: -1&#125; ); // 筆數與排序<br><br></code></pre></td></tr></table></figure><p>查詢 comments 超過 100 的資料列表，取得時先跳過前 30 筆資料，再顯示 30 筆資料</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.find(<br>  &#123;<br>    <span class="hljs-string">&quot;comments&quot;</span>: &#123;<br>        <span class="hljs-variable">$gt</span>: 100<br>    &#125;<br>  &#125;<br>).skip(30).<span class="hljs-built_in">limit</span>(30); // 要 30 筆，但先跳過 30 筆<br></code></pre></td></tr></table></figure><h3 id="replace-相關"><a href="#replace-相關" class="headerlink" title="replace 相關"></a>replace 相關</h3><p>替換 <strong>replaceOne、replaceMany：</strong>如下範例，透過 id 篩選了一筆要 replace 的資料，這邊會將 name 欄位修改成 yes~。<br>假設這筆資料還有其它欄位的話，在 replace 更新未寫到時，則會視為欄位的刪除，也就是這筆資料會只剩下 id 跟 name 欄位。（replace 這樣的用法也有刪除的功能）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.posts.replaceOne(<br>&#123;<span class="hljs-string">&quot;_id&quot;</span>:ObjectId(<span class="hljs-string">&quot;abcxxx&quot;</span>)&#125;,<br>&#123;name:<span class="hljs-string">&quot;yes~&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p><strong>Comparison Query Operators 表格</strong></p><table><thead><tr><th>$eq</th><th>等於</th></tr></thead><tbody><tr><td>$ne</td><td>不等於</td></tr><tr><td>$gt</td><td>大於</td></tr><tr><td>$lt</td><td>小於</td></tr><tr><td>$gte</td><td>大於等於</td></tr><tr><td>$lte</td><td>小於等於</td></tr><tr><td>$in</td><td>存在某個值</td></tr><tr><td>$nin</td><td>不存在某個值</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
      <tag>Mongo Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 傳值與傳參考</title>
    <link href="/post/js-value-or-reference.html"/>
    <url>/post/js-value-or-reference.html</url>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-的資料型別"><a href="#JavaScript-的資料型別" class="headerlink" title="JavaScript 的資料型別"></a>JavaScript 的資料型別</h2><p>在討論到傳值(Call by Value)或傳參考(Call by Reference)之前，我們先來了解 JavaScript 的資料型別，它分為「原始型別」跟「物件型別」兩大分類。</p><p>原始型別(純值)：</p><ul><li>Boolean</li><li>String</li><li>Number</li><li>Null</li><li>Undefined</li><li>BigInt</li><li>Symbol</li></ul><p>物件型別：<br>除了以上七種原始型別之外，其他都歸類為物件型別。（所以並沒有陣列型別、函式型別）</p><h2 id="傳值-Call-by-Value-、傳參考-Call-by-Reference"><a href="#傳值-Call-by-Value-、傳參考-Call-by-Reference" class="headerlink" title="傳值(Call by Value)、傳參考 (Call by Reference)"></a>傳值(Call by Value)、傳參考 (Call by Reference)</h2><p>了解到 JavaScript 的資料型別後，若以一般、基本狀況來說，<strong>原始型別的資料依循傳值的特性；而物件型別的資料則依循傳參考的特性</strong>。</p><h3 id="傳值-Call-by-Value"><a href="#傳值-Call-by-Value" class="headerlink" title="傳值(Call by Value)"></a>傳值(Call by Value)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">10</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num1 === num2); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> num2 = num1;<br>num2 = <span class="hljs-number">100</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num1 === num2); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num1, num2); <span class="hljs-comment">// 10, 100</span><br></code></pre></td></tr></table></figure><p>如上方兩個範例所示，如果你有一些些 JS 基礎，對於 <code>console.log</code> 的內容應該不會意外，我們以第二個範例作執行流程：</p><ol><li><code>var num1 = 10;</code>，宣告一個 num1 的變數，並指定為 10，這裡會建立一個記憶體(假設為 0x01)來儲存 10 這個值。</li><li><code>var num2 = num1;</code>，宣告一個 num2 的變數，並指定為 num1，這裡的 num2 會建立另一個記憶體(假設為 0x02)，並將 num1 的值(10)複製過來儲存。</li><li><code>num2 = 100;</code> 將 num2 的值改為 100。</li><li><code>console.log(num1 === num2); console.log(num1, num2)</code> num2 的更動並不會影響到 num1，因為他們存在於兩個不同的記憶體位置，num1 的值為 10，而 num2 的值為 100。</li></ol><p><strong>在原始型別的變數赋值和傳遞是以”值”來進行的，值跟值的關係是獨立不連動的。</strong></p><h3 id="傳參考-Call-by-Reference"><a href="#傳參考-Call-by-Reference" class="headerlink" title="傳參考 (Call by Reference)"></a>傳參考 (Call by Reference)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br><span class="hljs-attr">num</span>: <span class="hljs-number">10</span>,<br>&#125;;<br><span class="hljs-keyword">var</span> obj2 = &#123;<br><span class="hljs-attr">num</span>: <span class="hljs-number">10</span>,<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1 === obj2); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>物件在建立時，一樣會產生記憶體，不過這邊的變數儲存的是”記憶體位置”，而不是值（內容）。如上方範例所示，即使兩個物件內容是一致的，在<code>console.log</code>是得到不相等的，因為 obj1 跟 obj2 的記憶體參照位置不同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br><span class="hljs-attr">num</span>: <span class="hljs-number">10</span>,<br>&#125;;<br><span class="hljs-keyword">var</span> obj2 = obj1;<br>obj2.<span class="hljs-property">num</span> = <span class="hljs-number">100</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-property">num</span>, obj2.<span class="hljs-property">num</span>); <span class="hljs-comment">// 100, 100</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1 === obj2); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>我們再從這個範例拆解來更了解傳參考：</p><ol><li><code>var obj1 = &#123; num: 10 &#125;</code>，我們建立了一個內容為 <code>&#123;num: 10&#125;</code>的物件，而這個內容會儲存到記憶體(假設為 0x01)，而 obj1 這個變數是指向這個 0x01 的位置。</li><li><code>var obj2 = obj1;</code>，接著我們將 obj1 給賦予到 obj2 變數，不過因為不是”創建”物件，所以 obj2 變數是指向到 0x01 的位置，也就是說 obj2 跟 obj1 都指向相同的記憶體位置。</li><li><code>obj2.num = 100;</code>，雖然以變數名稱來說，似乎是針對 obj2 裡頭的內容做調整，但其實是調整到 0x01 這個記憶體位置所對應的內容。</li><li><code>console.log(obj1.num, obj2.num);</code>，因為都是在 0x01 這個記憶體位置，所以兩者是相同且連動的。</li></ol><p><strong>在物件型別中，變數的赋值和傳遞是以”記憶體位置”來做參照的。</strong></p><h2 id="例外跟結論"><a href="#例外跟結論" class="headerlink" title="例外跟結論"></a>例外跟結論</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br><span class="hljs-attr">num</span>: <span class="hljs-number">10</span>,<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeNum</span>(<span class="hljs-params">param</span>) &#123;<br>param.<span class="hljs-property">num</span> = <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-title function_">changeNum</span>(obj1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1); <span class="hljs-comment">// &#123;num: 100&#125;</span><br></code></pre></td></tr></table></figure><p>在上個段落的一開始提到，若以一般、基本狀況來說，原始型別的資料依循傳值的特性，而物件型別的資料則依循傳參考的特性。所以對於上方的範例結果，應該不會感到意外，即使作為 param 參數，它還是指向同個記憶體位置。</p><p>而有了一般狀況，就會有例外，接著我們來看例外的狀況是什麼。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br><span class="hljs-attr">num</span>: <span class="hljs-number">10</span>,<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeNum</span>(<span class="hljs-params">param</span>) &#123;<br>param = &#123; <span class="hljs-attr">num</span>: <span class="hljs-number">1000</span> &#125;;<br>&#125;<br><br><span class="hljs-title function_">changeNum</span>(obj1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1); <span class="hljs-comment">// 仍然是 num: 10</span><br></code></pre></td></tr></table></figure><p>如果依照剛才提到的傳參考，因為記憶體的指向，我們應該會推敲<code>console.log(obj1);</code>的結果是 <code>&#123; num: 1000 &#125;</code>；不過實際上得到的結果是 <code>&#123;num: 10&#125;</code>，也就是參數(param)中指向新物件時，記憶體將會重新指向，而與原先的物件(obj1)將沒有關聯性。<br>所以主流上對於這個特性，比較大宗是以 Call by Sharing 這個名詞來做解釋，我自己在複習（<del>補技術債</del>）時也燒腦了一下；不過後來覺得不用太拘泥在這些名詞，而是知道 JS 的這些特性，盡可能避免踩雷。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.tenlong.com.tw/products/9789864344130?list_name=srh">0 陷阱！0 誤解！8 天重新認識 JavaScript！</a></p><p><a href="https://www.tenlong.com.tw/products/9786263332973?list_name=srh">看完這本就會懂！帶你無痛提升 JavaScript 面試力</a></p><p><a href="https://blog.huli.tw/2018/06/23/javascript-call-by-value-or-reference/">深入探討 JavaScript 中的參數傳遞：call by value 還是 reference？</a></p><p><a href="https://pjchender.blogspot.com/2016/03/javascriptby-referenceby-value.html">[筆記] 談談 JavaScript 中 by reference 和 by value 的重要觀念</a></p><p><a href="https://medium.com/@mengchiang000/js%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5-call-by-value-%E9%82%84%E6%98%AFreference-%E5%8F%88%E6%88%96%E6%98%AF-sharing-22a87ca478fc">JS 基本觀念：call by value 還是 reference 又或是 sharing?</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>技術債</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>六角學院 React 入門工作坊第四週（最終）</title>
    <link href="/post/react-workshop-week4.html"/>
    <url>/post/react-workshop-week4.html</url>
    
    <content type="html"><![CDATA[<p>Photo by <a href="https://unsplash.com/@lautaroandreani?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Lautaro Andreani</a> on <a href="https://unsplash.com/photos/xkBaqlcqeb4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這週很有感的課程內容：<br>React 的優點是體驗 JS 的美好，而缺點也是 JS 的美好；Vue 的優點是幫開發者做了很多，而缺點也是幫開發者做了很多。<br>這段很符合我學習 Vue 跟 React 的心情寫照，2020 參加六角的 Vue 直播班時，剛開始覺得 Vue 的語法有點麻煩，要記滿多規矩的，雖然後來習慣就好了；而今年接觸 React 時，剛開始覺得好自由（<del>真香</del>），但隨著接觸時間稍長，就開始想起 Vue 的好 XD （框架都是工具，最重要的還是要達成什麼）</p><p>因為已經有了第三週的打底，所以這週的作業時間就會比較短。這邊先拆解一下流程：</p><ul><li>React Router：初步分好註冊、登入、Todo 頁面</li><li>刻畫面：這個部分就不列在文章內容中。本來第三週還滿懶惰的，所以是拿課程範例來改；不過等到要做最終作業時，又有點手癢想手刻一下…</li><li>註冊頁面<ul><li>除了原先的註冊 api，也會引入 SweetAlert2 做註冊成功或失敗的 popup 提示 (全部頁面都會使用)</li><li>註冊成功後，導向到登入頁面</li><li>防止註冊按鈕被連續點擊</li></ul></li><li>登入頁面<ul><li>登入成功與失敗，會用 popup 做提示。登入成功時，設置秒數導至 todo 頁面</li><li>登入成功後取得 token，並儲存在 document.cookie</li><li>防止登入按鈕被連續點擊</li></ul></li><li>Todo 頁面<ul><li>state 定義</li><li>驗證 api：驗證成功就可以使用 todo，如果驗證失敗，就用 popup 提醒使用者，並導回登入頁</li><li>取得待辦資料 (getTodo)</li><li>待辦的新增、刪除、編輯、狀態切換（成功與失敗的提醒）</li><li>全部、待完成、已完成的待辦篩選</li><li>從 todo 分出的元件</li><li>待完成待辦的數量顯示、清除已完成項目功能<ul><li>（2023.09.04 調整，原先寫錯成”已完成待辦的數量顯示”，程式以及這篇文章已調整為”待完成”）</li></ul></li><li>登出，popup 提醒使用者，然後導到登入頁</li></ul></li></ul><p><a href="https://www.billyji.com/react-workshop-week4-todolist/#/">第四週作品</a><br><a href="https://github.com/yaj55billy/react-workshop-week4-todolist">第四週程式碼</a></p><hr><h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h2><p>首先在專案中，引入 React Router <code>npm i react-router-dom</code>，然後在 main.jsx 進入點，從 React Router 引用 <code>&lt;HashRouter&gt;</code> 並包在 <code>&lt;App&gt;</code> 的外層。</p><p>接著可以照著課程指導的步驟：</p><ol><li>建立元件（頁面元件放在 view 資料夾）</li><li>設置路由表 （import 元件）</li><li>加入連結 （這邊不會用到）</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// main.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashRouter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.jsx&quot;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>)).<span class="hljs-title function_">render</span>(<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HashRouter</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">HashRouter</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// App.jsx</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Routes</span>, <span class="hljs-title class_">Route</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./styles/all.sass&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SignUp</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./views/SignUp.jsx&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SignIn</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./views/SignIn.jsx&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Todo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./views/Todo.jsx&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">SignIn</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/signup&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">SignUp</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/todo&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Todo</span> /&gt;</span>&#125; /&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/&gt;</span></span><br>);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>跟第三週一樣把 api 獨立成一支 js 來管理，不過內容有一些不同，因為在 todo 頁面驗證後，會在 todoBase 這個 axios 實體帶入以下這個設定：<code>todoBase.defaults.headers.common[&quot;Authorization&quot;] = todoToken</code>，所以在 todo 頁面用到的 api 就可以省略 headers 這個參數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// api/index.js</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><br><span class="hljs-comment">// todolist api</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> todoBase = axios.<span class="hljs-title function_">create</span>(&#123;<br><span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;https://todolist-api.hexschool.io&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">// 註冊</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiUsersSignUp</span> = (<span class="hljs-params">data</span>) =&gt; todoBase.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/users/sign_up&quot;</span>, data);<br><br><span class="hljs-comment">// 登入</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiUsersSignIn</span> = (<span class="hljs-params">data</span>) =&gt; todoBase.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/users/sign_in&quot;</span>, data);<br><br><span class="hljs-comment">// 驗證</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiUsersCheckout</span> = (<span class="hljs-params">headers</span>) =&gt;<br>todoBase.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/users/checkout&quot;</span>, headers);<br><br><span class="hljs-comment">// 登出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiUsersSignOut</span> = (<span class="hljs-params"></span>) =&gt; todoBase.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/users/sign_out&quot;</span>, &#123;&#125;);<br><br><span class="hljs-comment">// 取得所有待辦</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiGetTodos</span> = (<span class="hljs-params"></span>) =&gt; todoBase.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/todos/&quot;</span>);<br><br><span class="hljs-comment">// 新增待辦</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiPostTodos</span> = (<span class="hljs-params">data</span>) =&gt; todoBase.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/todos/&quot;</span>, data);<br><br><span class="hljs-comment">// 刪除待辦</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiDeleteTodos</span> = (<span class="hljs-params">id</span>) =&gt; todoBase.<span class="hljs-title function_">delete</span>(<span class="hljs-string">`/todos/<span class="hljs-subst">$&#123;id&#125;</span>`</span>);<br><br><span class="hljs-comment">// 切換待辦狀態</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiPatchTodos</span> = (<span class="hljs-params">id</span>) =&gt; todoBase.<span class="hljs-title function_">patch</span>(<span class="hljs-string">`/todos/<span class="hljs-subst">$&#123;id&#125;</span>/toggle`</span>, &#123;&#125;);<br><br><span class="hljs-comment">// 編輯待辦文字</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiPutTodos</span> = (<span class="hljs-params">id, data</span>) =&gt; todoBase.<span class="hljs-title function_">put</span>(<span class="hljs-string">`/todos/<span class="hljs-subst">$&#123;id&#125;</span>`</span>, data);<br></code></pre></td></tr></table></figure><h2 id="註冊"><a href="#註冊" class="headerlink" title="註冊"></a>註冊</h2><p>這邊單純呈現註冊頁的畫面部分：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// signUp.jsx</span><br><span class="hljs-comment">// ... 略</span><br><br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sign-up&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;content__header&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;content__title&quot;</span>&gt;</span>註冊帳號<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;content__body&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit(onSubmit)&#125;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form__item&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form__label&quot;</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;signupEmail&quot;</span>&gt;</span></span><br><span class="language-xml">Email</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form__input&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;signupEmail&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;請輸入 email&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">required</span></span></span><br><span class="hljs-tag"><span class="language-xml">&#123;<span class="hljs-attr">...register</span>(&quot;<span class="hljs-attr">email</span>&quot;)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form__item&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form__label&quot;</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;nickname&quot;</span>&gt;</span></span><br><span class="language-xml">您的暱稱</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form__input&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nickname&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;請輸入您的暱稱&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">required</span></span></span><br><span class="hljs-tag"><span class="language-xml">&#123;<span class="hljs-attr">...register</span>(&quot;<span class="hljs-attr">nickname</span>&quot;)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form__item&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form__label&quot;</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&quot;signupPassword&quot;</span>&gt;</span></span><br><span class="language-xml">密碼</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form__input&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;signupPassword&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;請輸入密碼&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">required</span></span></span><br><span class="hljs-tag"><span class="language-xml">&#123;<span class="hljs-attr">...register</span>(&quot;<span class="hljs-attr">password</span>&quot;)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-center mt-6&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form__button&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span></span><br><span class="language-xml">註冊帳號</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-center mt-3&quot;</span>&gt;</span></span><br><span class="language-xml">已有帳號了？<span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>登入<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>再來是註冊的程式部分：</p><ul><li>當填好表單按下註冊按鈕時，會執行 onSubmit 這個函式，並在參數中帶進表單資料，接著就會運行註冊的 api</li><li>註冊成功或失敗時，會使用 sweetalert2 引入的 popup 來通知使用者</li><li>註冊成功或失敗時，會將表單欄位清空。這邊是從 useForm 引出 reset 的功能</li><li>註冊成功時，會透過 navigate 導到登入頁面</li><li><code>const [isDisabled, setDisabled] = useState(false);</code> 這個狀態的定義，主要是綁在註冊按鈕的 disabled，在 api 過程讓按鈕為不能點擊的狀態，直到 api 過程結束（防止按鈕被連續點擊）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// signUp.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Swal</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;sweetalert2&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavLink</span>, useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useForm &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-hook-form&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; apiUsersSignUp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../api&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">SignUp</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [isDisabled, setDisabled] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> &#123; register, handleSubmit, reset &#125; = <span class="hljs-title function_">useForm</span>();<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">resetHandle</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">reset</span>();<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">onSubmit</span> = (<span class="hljs-params">data</span>) =&gt; &#123;<br>    <span class="hljs-title function_">setDisabled</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_">apiUsersSignUp</span>(data)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;恭喜註冊成功！&quot;</span>,<br>          <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;為您導至登入頁...&quot;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>          <span class="hljs-attr">showConfirmButton</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-attr">timer</span>: <span class="hljs-number">1500</span>,<br>        &#125;);<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>        &#125;, <span class="hljs-number">1500</span>);<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123;<br>          <span class="hljs-attr">title</span>: error.<span class="hljs-property">response</span>.<span class="hljs-property">data</span>.<span class="hljs-property">message</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>          <span class="hljs-attr">showConfirmButton</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-attr">timer</span>: <span class="hljs-number">1500</span>,<br>        &#125;);<br>      &#125;)<br>      .<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">setDisabled</span>(<span class="hljs-literal">false</span>);<br>        <span class="hljs-title function_">resetHandle</span>();<br>      &#125;);<br>  &#125;;<br>  <span class="hljs-keyword">return</span>(<br>    <span class="hljs-comment">// ... 略</span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="登入"><a href="#登入" class="headerlink" title="登入"></a>登入</h2><p>跟註冊頁面相似，所以這邊只呈現程式部分：</p><ul><li>登入成功或失敗時，會使用 sweetalert2 引入的 popup 來通知使用者</li><li>登入成功或失敗時，會將表單欄位清空。這邊是從 useForm 引出 reset 的功能</li><li>登入成功後，會從回應資料取出 token，並存到 document.cookie，待之後 todo 頁面再取出</li><li>登入成功後，使用 navigate 導向到 todo 頁面</li><li><code>const [isDisabled, setDisabled] = useState(false);</code> 這個狀態的定義，主要是綁在登入按鈕的 disabled，在 api 過程讓按鈕為不能點擊的狀態，直到 api 過程結束（防止按鈕被連續點擊）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// signIn.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Swal</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;sweetalert2&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavLink</span>, useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useForm &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-hook-form&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; apiUsersSignIn &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../api&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">SignIn</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> [isDisabled, setDisabled] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">const</span> &#123; register, handleSubmit, reset &#125; = <span class="hljs-title function_">useForm</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">resetHandle</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-title function_">reset</span>();<br>&#125;;<br><br><span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSubmit</span> = (<span class="hljs-params">data</span>) =&gt; &#123;<br><span class="hljs-title function_">setDisabled</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-title function_">apiUsersSignIn</span>(data)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> &#123; token &#125; = res.<span class="hljs-property">data</span>;<br><span class="hljs-keyword">const</span> tomorrow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>tomorrow.<span class="hljs-title function_">setDate</span>(tomorrow.<span class="hljs-title function_">getDate</span>() + <span class="hljs-number">1</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">`token=<span class="hljs-subst">$&#123;token&#125;</span>;expires=<span class="hljs-subst">$&#123;tomorrow.toUTCString()&#125;</span>`</span>;<br><span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;登入成功！&quot;</span>,<br><span class="hljs-attr">text</span>: <span class="hljs-string">&quot;為您導至 Todo 頁面...&quot;</span>,<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;success&quot;</span>,<br><span class="hljs-attr">showConfirmButton</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">timer</span>: <span class="hljs-number">1500</span>,<br>&#125;);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/todo&quot;</span>);<br>&#125;, <span class="hljs-number">1500</span>);<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;登入失敗&quot;</span>,<br><span class="hljs-attr">text</span>: <span class="hljs-string">&quot;請檢查帳密是否正確，或是否有註冊過。&quot;</span>,<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;error&quot;</span>,<br><span class="hljs-attr">showConfirmButton</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">timer</span>: <span class="hljs-number">1500</span>,<br>&#125;);<br>&#125;)<br>.<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">setDisabled</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-title function_">resetHandle</span>();<br>&#125;);<br>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Todo-頁"><a href="#Todo-頁" class="headerlink" title="Todo 頁"></a>Todo 頁</h2><h3 id="state-定義"><a href="#state-定義" class="headerlink" title="state 定義"></a>state 定義</h3><p>首先我們先定義好會用到的 state：</p><ul><li>todo 資料：<code>const [todo, setTodo] = useState([])</code></li><li>todo 資料的分類（全部、待完成、已完成）：<code>const [todoType, setTodoType] = useState(&quot;all&quot;);</code></li><li>待辦事項 input：<code>const [input, setInput] = useState(&quot;&quot;)</code></li><li>用戶的 nickname：<code>const [nickname, setNickname] = useState(&quot;&quot;)</code></li><li>編輯的時候會使用上暫存物件：<code>const [editTarget, setEditTarget] = useState(&#123;&#125;)</code></li></ul><h3 id="驗證-api"><a href="#驗證-api" class="headerlink" title="驗證 api"></a>驗證 api</h3><p>進到 todo 頁面時，首先需先經過 token 的驗證，驗證成功才能在此頁面操作，否則就會通知驗證失敗並導回登入頁。</p><ol><li>從 document.cookie 取出剛才在登入成功時設置的 token，並存取在 todoToken 這個變數中</li><li>設置 checkLogin 這個函式，內容會使用 apiUsersCheckout 這支驗證 api，記得要帶上 <code>headers:&#123;Authorization: todoToken&#125;</code><ul><li>驗證成功時會設置 nickname， 以及將 token 設置在 todoBase 這個實體，之後在 todo 頁面的 api 操作都不需帶上 <code>headers:&#123;Authorization: todoToken&#125;</code>，接著透過 getTodos() 獲取所有待辦項目。（這個步驟還未定義 getTodos()）</li><li>驗證失敗時，會用 popup 來通知，之後導回登入頁面</li></ul></li><li>透過 useEffect 去執行 checkLogin 這個函式（第二個空陣列參數，表示只有最開始時會執行一次）</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// todo.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Swal</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;sweetalert2&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<br>apiUsersCheckout,<br>apiGetTodos,<br>apiPostTodos,<br>apiDeleteTodos,<br>apiPatchTodos,<br>apiPutTodos,<br>todoBase,<br>apiUsersSignOut,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../api&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Todo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-comment">// ... 略</span><br><span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br><span class="hljs-keyword">const</span> todoToken = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span><br>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;; &quot;</span>)<br>.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">row</span>) =&gt;</span> row.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;token=&quot;</span>))<br>?.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>)[<span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">checkLogin</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-title function_">apiUsersCheckout</span>(&#123;<br><span class="hljs-attr">headers</span>: &#123;<br><span class="hljs-title class_">Authorization</span>: todoToken,<br>&#125;,<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-title function_">setNickname</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">nickname</span>);<br>todoBase.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">common</span>[<span class="hljs-string">&quot;Authorization&quot;</span>] = todoToken;<br><span class="hljs-title function_">getTodos</span>();<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;驗證失敗，請先登入&quot;</span>,<br><span class="hljs-attr">text</span>: <span class="hljs-string">&quot;稍後導至登入頁&quot;</span>,<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;error&quot;</span>,<br><span class="hljs-attr">showConfirmButton</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">timer</span>: <span class="hljs-number">1500</span>,<br>&#125;);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>&#125;, <span class="hljs-number">1500</span>);<br>&#125;);<br>&#125;;<br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">checkLogin</span>();<br>&#125;, []);<br><span class="hljs-comment">// ... 略</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="取得待辦資料-getTodos"><a href="#取得待辦資料-getTodos" class="headerlink" title="取得待辦資料 (getTodos)"></a>取得待辦資料 (getTodos)</h3><p>再來我們要定義 getTodos 這個函式，內容透過 apiGetTodos() 這支取得所有待辦的 api 來取得資料。<br>不論在驗證後，以及新增、刪除、修改待辦等動作都會來執行這個函式，重新抓取最新資料。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// todo.jsx</span><br><span class="hljs-comment">// ... 略</span><br><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<br>apiUsersCheckout,<br>apiGetTodos,<br>apiPostTodos,<br>apiDeleteTodos,<br>apiPatchTodos,<br>apiPutTodos,<br>todoBase,<br>apiUsersSignOut,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../api&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Todo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> [todo, setTodo] = <span class="hljs-title function_">useState</span>([]);<br><span class="hljs-comment">// ... 略</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getTodos</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-title function_">apiGetTodos</span>()<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-title function_">setTodo</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>);<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>&#125;);<br>&#125;;<br><span class="hljs-comment">// ... 略</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="待辦的新增、刪除、編輯、狀態切換"><a href="#待辦的新增、刪除、編輯、狀態切換" class="headerlink" title="待辦的新增、刪除、編輯、狀態切換"></a>待辦的新增、刪除、編輯、狀態切換</h3><p>在待辦的新增、刪除、編輯、狀態切換等函式中，除了從 api&#x2F;index.js 取得各個 api 操作，也使用上 SweetAlert2 的 Toast 設置，在 api 執行後的成功或失敗做個通知。</p><p>提醒：</p><ul><li>在每個 api 執行後，記得呼叫 getTodos()，重新獲得最新資料</li><li>待辦新增（addTodo）記得要清空 input（<code>setInput(&quot;&quot;)</code>）</li><li>刪除與編輯記得要帶上 id</li><li>編輯待辦（updateTodo），記得要清空暫存的物件（<code>setEditTarget(&#123;&#125;)</code>）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// todo.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Swal</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;sweetalert2&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<br>apiUsersCheckout,<br>apiGetTodos,<br>apiPostTodos,<br>apiDeleteTodos,<br>apiPatchTodos,<br>apiPutTodos,<br>todoBase,<br>apiUsersSignOut,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../api&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Todo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> [todo, setTodo] = <span class="hljs-title function_">useState</span>([]);<br><span class="hljs-keyword">const</span> [todoType, setTodoType] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;all&quot;</span>);<br><span class="hljs-keyword">const</span> [input, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">const</span> [nickname, setNickname] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">const</span> [editTarget, setEditTarget] = <span class="hljs-title function_">useState</span>(&#123;&#125;);<br><br><span class="hljs-comment">// ...略</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Toast</span> = <span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">mixin</span>(&#123;<br><span class="hljs-attr">toast</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">position</span>: <span class="hljs-string">&quot;top-end&quot;</span>,<br><span class="hljs-attr">showConfirmButton</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">customClass</span>: &#123;<br><span class="hljs-attr">popup</span>: <span class="hljs-string">&quot;colored-toast&quot;</span>,<br>&#125;,<br><span class="hljs-attr">timer</span>: <span class="hljs-number">1500</span>,<br><span class="hljs-attr">timerProgressBar</span>: <span class="hljs-literal">true</span>,<br>&#125;);<br><br><span class="hljs-comment">// 新增項目</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">addTodo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">if</span> (input === <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-title function_">apiPostTodos</span>(&#123; <span class="hljs-attr">content</span>: input &#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;success&quot;</span>,<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;新增待辦成功&quot;</span>,<br>&#125;);<br><span class="hljs-title function_">getTodos</span>();<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;error&quot;</span>,<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;新增待辦失敗，請再檢查看看&quot;</span>,<br>&#125;);<br>&#125;)<br>.<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">setInput</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 清空</span><br><span class="hljs-title function_">setTodoType</span>(<span class="hljs-string">&quot;all&quot;</span>); <span class="hljs-comment">// 將頁籤切換為「全部」</span><br>&#125;);<br>&#125;;<br><br><span class="hljs-comment">// 刪除項目</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">deleteTodo</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br><span class="hljs-title function_">apiDeleteTodos</span>(id)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;success&quot;</span>,<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;刪除待辦成功&quot;</span>,<br>&#125;);<br><span class="hljs-title function_">getTodos</span>();<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;error&quot;</span>,<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;刪除待辦失敗，請再檢查看看&quot;</span>,<br>&#125;);<br>&#125;);<br>&#125;;<br><br><span class="hljs-comment">// 切換狀態（是否完成）</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">toggleTodo</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br><span class="hljs-title function_">apiPatchTodos</span>(id)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;success&quot;</span>,<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;待辦狀態更新成功&quot;</span>,<br>&#125;);<br><span class="hljs-title function_">getTodos</span>();<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;error&quot;</span>,<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;待辦狀態更新失敗，請再檢查看看&quot;</span>,<br>&#125;);<br>&#125;);<br>&#125;;<br><br><span class="hljs-comment">// 編輯項目</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">updateTodo</span> = (<span class="hljs-params">id, content</span>) =&gt; &#123;<br><span class="hljs-title function_">apiPutTodos</span>(id, &#123; content &#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;success&quot;</span>,<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;編輯待辦成功&quot;</span>,<br>&#125;);<br><span class="hljs-title function_">getTodos</span>();<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;error&quot;</span>,<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;編輯待辦失敗，請再檢查看看&quot;</span>,<br>&#125;);<br>&#125;)<br>.<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">setEditTarget</span>(&#123;&#125;);<br>&#125;);<br>&#125;;<br><br><span class="hljs-comment">//...略</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="全部、待完成、已完成的待辦篩選"><a href="#全部、待完成、已完成的待辦篩選" class="headerlink" title="全部、待完成、已完成的待辦篩選"></a>全部、待完成、已完成的待辦篩選</h3><ol><li>如同我們前面定義的 <code>const [todoType, setTodoType] = useState(&quot;all&quot;);</code>，這個部分用來定義 todo 篩選的三種狀態：全部（all）、待完成（active）、已完成（completed）</li><li>再來我們用 todoTypeChange 這個函式來定義 todoType 狀態的切換，這是使用按鈕點擊（帶上狀態）來觸發</li><li>根據 todoType 狀態的不同，用 todo.filter 來篩選出我們需要的資料，並存在 filterTodo 這個變數中，之後在樣板中是以 filterTodo.map() 來渲染</li><li>根據 todoType 狀態的不同，做 active class 的切換</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Todo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [todo, setTodo] = <span class="hljs-title function_">useState</span>([]);<br>  <span class="hljs-keyword">const</span> [todoType, setTodoType] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;all&quot;</span>);<br>  <span class="hljs-comment">// ... 略</span><br><br>  <span class="hljs-comment">// 切換：全部、待完成、已完成</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">todoTypeChange</span> = (<span class="hljs-params">status</span>) =&gt; &#123;<br>    <span class="hljs-title function_">setTodoType</span>(status);<br>  &#125;;<br><br>  <span class="hljs-comment">// 根據 todoType ，決定顯示要什麼資料</span><br>  <span class="hljs-keyword">const</span> filterTodo = todo.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (todoType === <span class="hljs-string">&quot;completed&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> item.<span class="hljs-property">status</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (todoType === <span class="hljs-string">&quot;active&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> !item.<span class="hljs-property">status</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// ... 略</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo__category&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">todo__category__list</span> $&#123;</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">todoType</span> === <span class="hljs-string">&quot;all&quot;</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;</span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> todoTypeChange(&quot;all&quot;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        全部</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">todo__category__list</span> $&#123;</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">todoType</span> === <span class="hljs-string">&quot;active&quot;</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;</span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> todoTypeChange(&quot;active&quot;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        待完成</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;</span>`<span class="hljs-attr">todo__category__list</span> $&#123;</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">todoType</span> === <span class="hljs-string">&quot;completed&quot;</span> ? &quot;<span class="hljs-attr">active</span>&quot; <span class="hljs-attr">:</span> &quot;&quot;</span></span><br><span class="hljs-tag"><span class="language-xml">        &#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> todoTypeChange(&quot;completed&quot;)&#125;</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">        已完成</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo__list&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;filterTodo.map((item) =&gt; &#123;</span><br><span class="language-xml">        return (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">TodoItem</span></span></span><br><span class="hljs-tag"><span class="language-xml">            // <span class="hljs-attr">...略</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        );</span><br><span class="language-xml">      &#125;)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <span class="hljs-comment">// ... 略</span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="從-todo-分出的元件"><a href="#從-todo-分出的元件" class="headerlink" title="從 todo 分出的元件"></a>從 todo 分出的元件</h3><p>這次有從 todo 頁面中，分出 TodoItem（todo 項目）、TodoCategory（todo 篩選）這兩個元件。<br>而這個段落會來提一下 TodoItem 這個元件，根據這個元件所需，我們得傳入 todo 項目的資訊（id、content、status），以及一些待辦的函式（刪除、狀態切換、編輯…等），可看下方程式碼的註解。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// todo.jsx</span><br><span class="hljs-comment">// ... 略</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TodoItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../components/TodoItem&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TodoCategory</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../components/TodoCategory&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Todo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> [todo, setTodo] = <span class="hljs-title function_">useState</span>([]);<br><span class="hljs-keyword">const</span> [todoType, setTodoType] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;all&quot;</span>);<br><span class="hljs-keyword">const</span> [input, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">const</span> [nickname, setNickname] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">const</span> [editTarget, setEditTarget] = <span class="hljs-title function_">useState</span>(&#123;&#125;);<br><br><span class="hljs-comment">// ... 略</span><br><br><span class="hljs-comment">// 刪除項目</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">deleteTodo</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br><span class="hljs-comment">// ... 略</span><br>&#125;;<br><br><span class="hljs-comment">// 切換狀態（是否完成）</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">toggleTodo</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br><span class="hljs-comment">// ... 略</span><br>&#125;;<br><br><span class="hljs-comment">// 編輯項目</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">updateTodo</span> = (<span class="hljs-params">id, content</span>) =&gt; &#123;<br><span class="hljs-comment">// ... 略</span><br>&#125;;<br><br><span class="hljs-comment">// 切換：全部、待完成、已完成</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">todoTypeChange</span> = (<span class="hljs-params">status</span>) =&gt; &#123;<br><span class="hljs-title function_">setTodoType</span>(status);<br>&#125;;<br><br><span class="hljs-comment">// 根據 todoType ，決定顯示要什麼資料</span><br><span class="hljs-keyword">const</span> filterTodo = todo.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (todoType === <span class="hljs-string">&quot;completed&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> item.<span class="hljs-property">status</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (todoType === <span class="hljs-string">&quot;active&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> !item.<span class="hljs-property">status</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;);<br><br><span class="hljs-keyword">return</span> (<br><span class="hljs-comment">// ... 略</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo__content&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TodoCategory</span> <span class="hljs-attr">todoType</span>=<span class="hljs-string">&#123;todoType&#125;</span> <span class="hljs-attr">todoTypeChange</span>=<span class="hljs-string">&#123;todoTypeChange&#125;</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo__list&quot;</span>&gt;</span></span><br><span class="language-xml">&#123;filterTodo.map((item) =&gt; &#123;</span><br><span class="language-xml">return (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TodoItem</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> // <span class="hljs-attr">id</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">id</span>=<span class="hljs-string">&#123;item.id&#125;</span> // <span class="hljs-attr">id</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">content</span>=<span class="hljs-string">&#123;item.content&#125;</span> // <span class="hljs-attr">input</span> <span class="hljs-attr">text</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">status</span>=<span class="hljs-string">&#123;item.status&#125;</span> // <span class="hljs-attr">狀態</span>，<span class="hljs-attr">預設為待完成</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">toggleTodo</span>=<span class="hljs-string">&#123;toggleTodo&#125;</span> // <span class="hljs-attr">狀態切換的函式</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">deleteTodo</span>=<span class="hljs-string">&#123;deleteTodo&#125;</span> // <span class="hljs-attr">刪除項目的函式</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">editTarget</span>=<span class="hljs-string">&#123;editTarget&#125;</span> // <span class="hljs-attr">當前編輯的暫存物件</span> （<span class="hljs-attr">存</span> <span class="hljs-attr">id</span>、<span class="hljs-attr">content</span>)</span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">setEditTarget</span>=<span class="hljs-string">&#123;setEditTarget&#125;</span> // <span class="hljs-attr">當前編輯的暫存物件</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">updateTodo</span>=<span class="hljs-string">&#123;updateTodo&#125;</span> // <span class="hljs-attr">編輯項目的函式</span></span></span><br><span class="hljs-tag"><span class="language-xml">/&gt;</span></span><br><span class="language-xml">);</span><br><span class="language-xml">&#125;)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Todo</span>;<br></code></pre></td></tr></table></figure><p>接下來是 TodoItem.jsx 這個元件本身，要使用透過父層（props）傳進來的資料或函式時，需先引用 propTypes 來做定義。</p><p>再來會提到 editTarget 跟 setEditTarget 的部分，在定義上是用來存取暫時資料，方便用於程式上的判斷。當我們初始去點擊編輯 icon 時，就會觸發 <code>setEditTarget(&#123; id, content &#125;)</code>，並將項目的 id 跟 content(input) 給傳入做暫時資料。<br>而這樣的暫時資料，可以在畫面使用 <code>editTarget.id === id</code> 這樣的方式，來判斷我們點到的是哪一個項目，並顯示相對應的內容。例如我們點到第二個項目，對於這個項目就會顯示一個 input 框，以及一個 check icon，而當我們點擊 check icon 時，就會觸發 updateTodo 的功能，並將 id 跟新的 content(input) 帶進去執行編輯的 api。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// TodoItem.jsx</span><br><span class="hljs-keyword">import</span> propTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">TodoItem</span> = (<span class="hljs-params">&#123;</span><br><span class="hljs-params">id,</span><br><span class="hljs-params">content,</span><br><span class="hljs-params">status,</span><br><span class="hljs-params">toggleTodo,</span><br><span class="hljs-params">deleteTodo,</span><br><span class="hljs-params">editTarget,</span><br><span class="hljs-params">setEditTarget,</span><br><span class="hljs-params">updateTodo,</span><br><span class="hljs-params">&#125;</span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">atChange</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-title function_">toggleTodo</span>(id);<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">atClickDelete</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-title function_">deleteTodo</span>(id);<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">atClickEdit</span> = (<span class="hljs-params">id, content</span>) =&gt; &#123;<br><span class="hljs-title function_">updateTodo</span>(id, content);<br>&#125;;<br><br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo__item&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo__label&quot;</span> <span class="hljs-attr">htmlFor</span>=<span class="hljs-string">&#123;id&#125;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo__check&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">id</span>=<span class="hljs-string">&#123;id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;status&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;atChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">/&gt;</span></span><br><span class="language-xml">&#123;editTarget.id === id ? (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;form__input&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">value</span>=<span class="hljs-string">&#123;editTarget.content&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="language-xml">setEditTarget(&#123; ...editTarget, content: e.target.value &#125;);</span><br><span class="language-xml">&#125;&#125;</span><br><span class="language-xml">/&gt;</span><br><span class="language-xml">) : (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo__text&quot;</span>&gt;</span>&#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo__icon&quot;</span>&gt;</span></span><br><span class="language-xml">&#123;editTarget.id === id ? (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">i</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;fa-solid fa-check&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> atClickEdit(editTarget.id, editTarget.content)&#125;</span><br><span class="language-xml">&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">) : (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">i</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;fa-regular fa-pen-to-square&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">setEditTarget(&#123; id, content &#125;);</span><br><span class="language-xml">&#125;&#125;</span><br><span class="language-xml">&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="language-xml">)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo__icon&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;atClickDelete&#125;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;fa fa-times&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>);<br>&#125;;<br><br><span class="hljs-title class_">TodoItem</span>.<span class="hljs-property">propTypes</span> = &#123;<br><span class="hljs-attr">id</span>: propTypes.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br><span class="hljs-attr">content</span>: propTypes.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br><span class="hljs-attr">status</span>: propTypes.<span class="hljs-property">bool</span>.<span class="hljs-property">isRequired</span>,<br><span class="hljs-attr">toggleTodo</span>: propTypes.<span class="hljs-property">func</span>.<span class="hljs-property">isRequired</span>,<br><span class="hljs-attr">deleteTodo</span>: propTypes.<span class="hljs-property">func</span>.<span class="hljs-property">isRequired</span>,<br><span class="hljs-attr">editTarget</span>: propTypes.<span class="hljs-property">object</span>.<span class="hljs-property">isRequired</span>,<br><span class="hljs-attr">setEditTarget</span>: propTypes.<span class="hljs-property">func</span>.<span class="hljs-property">isRequired</span>,<br><span class="hljs-attr">updateTodo</span>: propTypes.<span class="hljs-property">func</span>.<span class="hljs-property">isRequired</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">TodoItem</span>;<br></code></pre></td></tr></table></figure><h3 id="“待完成”待辦的數量顯示、清除”已完成”項目功能"><a href="#“待完成”待辦的數量顯示、清除”已完成”項目功能" class="headerlink" title="“待完成”待辦的數量顯示、清除”已完成”項目功能"></a>“待完成”待辦的數量顯示、清除”已完成”項目功能</h3><p>“待完成”待辦的數量顯示比較單純，宣告 todoUnCompleted 這個變數去儲存 todo 篩選待完成的項目，然後再用 <code>&#123;todoUnCompleted.length&#125;</code> 渲染到畫面上。</p><p>而清除”已完成”項目的功能，則是使用 todo 去篩選已完成項目，然後帶入這些已完成項目的 id 到 apiDeleteTodos 做刪除處理。因為要刪除的項目不只一個，所以會使用到 Promise.all 來等待全部已完成的項目都被刪除後，再用 Toast 通知使用者。<br>（記得 getTodos() 重新獲取資料。）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// todo.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Swal</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;sweetalert2&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<br>apiUsersCheckout,<br>apiGetTodos,<br>apiPostTodos,<br>apiDeleteTodos,<br>apiPatchTodos,<br>apiPutTodos,<br>todoBase,<br>apiUsersSignOut,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../api&quot;</span>;<br><span class="hljs-comment">// ... 略</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Todo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> [todo, setTodo] = <span class="hljs-title function_">useState</span>([]);<br><span class="hljs-keyword">const</span> [todoType, setTodoType] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;all&quot;</span>);<br><span class="hljs-keyword">const</span> [input, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">const</span> [nickname, setNickname] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">const</span> [editTarget, setEditTarget] = <span class="hljs-title function_">useState</span>(&#123;&#125;);<br><br><span class="hljs-comment">// ... 略</span><br><br><span class="hljs-comment">// 從原先 list 資料去 filter</span><br><span class="hljs-keyword">const</span> todoUnCompleted = todo.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> !item.<span class="hljs-property">status</span>;<br>&#125;);<br><br><span class="hljs-comment">// 清除已完成項目</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">clearTodoCompleted</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> result = todo.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (item.<span class="hljs-property">status</span>) &#123;<br><span class="hljs-title function_">apiDeleteTodos</span>(item.<span class="hljs-property">id</span>);<br>&#125;<br>&#125;);<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(result).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title class_">Toast</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;success&quot;</span>,<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;清除已完成項目成功&quot;</span>,<br>&#125;);<br><span class="hljs-title function_">getTodos</span>();<br>&#125;);<br>&#125;;<br><br><span class="hljs-keyword">return</span> (<br><span class="hljs-comment">// ... 略</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo__bottom&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo__bottom__text&quot;</span>&gt;</span></span><br><span class="language-xml">&#123;todoUnCompleted.length&#125; 個已完成項目</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo__bottom__btn&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;clearTodoCompleted&#125;</span>&gt;</span></span><br><span class="language-xml">清除已完成項目</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h3><p>登出在執行 apiUsersSignOut() 時，記得清理 document.cookie (<code>document.cookie = &quot;token=; expires=;&quot;</code>)</p><p>在登出成功時，會透過 navigate 導回登入頁面</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// todo.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Swal</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;sweetalert2&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<br>apiUsersCheckout,<br>apiGetTodos,<br>apiPostTodos,<br>apiDeleteTodos,<br>apiPatchTodos,<br>apiPutTodos,<br>todoBase,<br>apiUsersSignOut,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../api&quot;</span>;<br><span class="hljs-comment">// ... 略</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Todo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-comment">// ... 略</span><br><br><span class="hljs-keyword">const</span> navigate = <span class="hljs-title function_">useNavigate</span>();<br><br><span class="hljs-comment">// ... 略</span><br><br><span class="hljs-comment">// 登出</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">signOut</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-title function_">apiUsersSignOut</span>()<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">&quot;token=; expires=;&quot;</span>;<br><span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;您已登出&quot;</span>,<br><span class="hljs-attr">text</span>: <span class="hljs-string">&quot;為您導回登入頁面...&quot;</span>,<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;success&quot;</span>,<br><span class="hljs-attr">showConfirmButton</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">timer</span>: <span class="hljs-number">1500</span>,<br>&#125;);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">navigate</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>&#125;, <span class="hljs-number">1500</span>);<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&quot;登出失敗，請再檢查看看&quot;</span>,<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;error&quot;</span>,<br><span class="hljs-attr">showConfirmButton</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">timer</span>: <span class="hljs-number">1500</span>,<br>&#125;);<br>&#125;);<br>&#125;;<br><br><span class="hljs-keyword">return</span> (<br><span class="hljs-comment">// ... 略</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;greet&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;greet__text&quot;</span>&gt;</span>Hi~ &#123;nickname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;greet__btn&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;signOut&#125;</span>&gt;</span></span><br><span class="language-xml">登出</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="hljs-comment">// ... 略</span><br>);<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>透過這幾週跟著作業產出拆解文章，比較有感的部分是<strong>狀況的掌握</strong>，不論正在製作哪個功能，或者正卡關在什麼地方，都比較不會混亂跟一片空白。</p><p>講到一片空白，也來分享自己先前看書所學習到的。基本上來說，即使現在的科技相當發達，我們大腦主要還是以<strong>求生</strong>作為導向，所以當我們面臨太多資訊、思考太多時，大腦會容易處於當機狀態（避免過度耗能）。回想一下學生時期在準備考試時，是不是會突然開始整理房間呢？因為大腦判斷準備考試實在太麻煩（太耗能）了。而依循大腦這樣的特性，再來延伸說到<strong>寫文章</strong>跟<strong>拆解任務</strong>。</p><p>關於<strong>寫文章</strong>這件事，過去我自己也都無法維持住，所以往往寫個一陣子就會放掉；後來在一些探索下，我知道了無法維持的原因，因為會很貪心的在寫文章這件事添加很多資訊（完美主義作祟），像是要寫到什麼程度、別人怎麼看、是否容易理解…等等，可是這樣太多的<strong>想法</strong>、<strong>期待</strong>、<strong>資訊</strong>只會讓大腦很快的當機，初步就無法維持習慣，畢竟阻力實在太大了。</p><p>所以我們可以先<strong>降低門檻</strong>，以自己為出發點：對於什麼議題有興趣、什麼部分之後會用到、想要練習什麼，或者單純分享自己踩到的雷。放掉只是想像的期待，寫的好與壞其實都沒關係，畢竟還在起頭建立習慣。像是我 8 月中做的這個 <a href="https://www.billyji.com/2023/08/14/learn-pinia/">Pinia 筆記</a>，雖然簡簡單單，但沒多久我在寫 Nuxt 專案時就派上用場了。如果嘗試後真的寫不下去也沒關係，也許你是透過大量練習、實戰在組織自己知識的人；也可能是在多些經驗後，發現寫筆記、Blog 對自己的重要性，<strong>It’s all ok</strong>。</p><p>再來討論到<strong>拆解任務</strong>，這也是我操作後相當推薦的方法。剛開始成為前端時，每當新專案一來（或者舊專案要修改），二話不說就是直接打開編輯器開工；不過當工作累積一些經驗後，變成專案一來會先規劃跟拆解，基本上我電腦桌的附近一定會擺上筆記本或紙。而這樣的拆解在專案的進行上會比較順，也是順著大腦的特性走，讓它不會一次進太多資訊而當機。不過在實際專案上，因為有時間上的壓力，無法像上課這樣拆解的比較細，所以可以好好利用上課來嘗試拆解。</p><p>感謝你看到這邊，一不注意就在結尾處提了比較多。若有什麼部分寫錯，也再麻煩跟我說，感恩！</p><p>（感謝 Evan 同學發現待辦 CRUD 沒寫好的部分！）<br>（感謝助教提供優化部分！）</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>六角學院</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>六角學院 React 入門工作坊第三週</title>
    <link href="/post/react-workshop-week3.html"/>
    <url>/post/react-workshop-week3.html</url>
    
    <content type="html"><![CDATA[<p>Photo by <a href="https://unsplash.com/@lautaroandreani?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Lautaro Andreani</a> on <a href="https://unsplash.com/photos/xkBaqlcqeb4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第三週因為事情比較多，所以整體的進度慢了一些。上課也只能跟到前半段 30 分鐘，覺得曠掉直播課是滿可惜的(QQ)，而且也可能會錯過<del>尿點</del>知識；後來在隔天老師上傳錄影檔時，就趕快補上進度，這週的主軸核心為 API 串接，可以好好做個練習，上課時老師也會補上一些知識點（ex: JWT），並講解的比較好理解。</p><p>這週因為一些規劃跟時間關係，所以會跟前兩週完整拆解的方式不同，這邊抽出三個部分來分享：</p><ul><li>React Hook Form</li><li>Axios 的 API 管理</li><li>關於 API 串接練習</li></ul><p><a href="https://www.billyji.com/react-workshop-week3/">第三週作品</a></p><hr><h2 id="React-Hook-Form"><a href="#React-Hook-Form" class="headerlink" title="React Hook Form"></a>React Hook Form</h2><p>一開始在寫註冊這個元件時，忽然興起了找表單套件的想法，後來就找到了<a href="https://react-hook-form.com/">React Hook Form</a>，也決定在這次作業中來嘗試一下。</p><h3 id="起手安裝"><a href="#起手安裝" class="headerlink" title="起手安裝"></a>起手安裝</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> react-hook-form<br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ol><li>在元件中透過 <code>import &#123; useForm &#125; from &quot;react-hook-form&quot;</code>，從表單套件引用 useForm 這個功能</li><li>接著從 useForm 的執行中，解構出 register 跟 handleSubmit。（前者處理資料，後者處理表單提交相關）</li><li>再來定義好表單送出的 onSubmit 函式，這是屬於自定義的函式，所以命名也是自定義的。稍後就會提到這個自定義函式的 data 參數。</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useForm &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-hook-form&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">SignUp</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> &#123;<br>register, <span class="hljs-comment">// state</span><br>handleSubmit, <span class="hljs-comment">// submit</span><br>&#125; = <span class="hljs-title function_">useForm</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSubmit</span> = (<span class="hljs-params">data</span>) =&gt; &#123;<br><span class="hljs-comment">// 自定義的 submit</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;;<br><br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>...略<span class="hljs-tag">&lt;/&gt;</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="在-jsx-中使用"><a href="#在-jsx-中使用" class="headerlink" title="在 jsx 中使用"></a>在 jsx 中使用</h3><p>接著我們來看 jsx 樣板部分：</p><ol><li>如稍早所述 register 是處理資料相關，它用來建立表單元素跟資料的關聯。在下方程式碼的三個 input 中，我們都能看到 <code>&#123;...register(&quot;欄位命名&quot;)&#125;</code> 這樣的方式，將 state 登記（綁定）到某個表單元素。</li><li>而在 form tag 的部分，<code>handleSubmit</code> 是處理表單提交的函式，透過這樣 <code>&#123;handleSubmit(onSubmit)&#125;</code> 把我們自定義的函式丟進去，就能在表單送出後，在自定義函式的參數中，得到 <code>register</code> 的資料。</li></ol><p>（爲了方便理解，所以有稍微省略一些程式碼結構）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;signUpPage&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;bg-yellow&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;formControls&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit(onSubmit)&#125;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;formControls_txt&quot;</span>&gt;</span>註冊帳號<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;formControls_input&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;請輸入 email&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&#123;<span class="hljs-attr">...register</span>(&quot;<span class="hljs-attr">email</span>&quot;)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;formControls_input&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nickname&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;請輸入您的暱稱&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&#123;<span class="hljs-attr">...register</span>(&quot;<span class="hljs-attr">nickname</span>&quot;)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;formControls_input&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;請輸入密碼&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&#123;<span class="hljs-attr">...register</span>(&quot;<span class="hljs-attr">password</span>&quot;)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;formControls_btnSubmit&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span></span><br><span class="language-xml">註冊帳號</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>補充：<br>從以上範例中，當我們填寫好 input 並送出表單後，就能從自定義函式的 <code>data</code> 參數中取得資料。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 自定義的 submit</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSubmit</span> = (<span class="hljs-params">data</span>) =&gt; &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br><span class="hljs-comment">// &#123;email: &#x27;我們所填入的 mail&#x27;, nickname: &#x27;填入的 nickname&#x27;, password: &#x27;填入的密碼&#x27;&#125;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h3><p>這週上課時，中途有提到表單處理，雖然 React 在資料處理上有一些固定的模式，但不得不說是比較複雜的（很吃 JS 底子）。</p><p>這次作業的表單是較為單純的（欄位少），所以即使不用這個套件，對於速度跟方便性上也不會差異太多；不過透過這樣的嘗試，可以知道如果是複雜表單（欄位多），就相當適合導入使用，而這個套件也包含了一些方便的功能，像是狀態監聽、錯誤樣式、驗證等等。</p><h2 id="Axios-的-API-管理"><a href="#Axios-的-API-管理" class="headerlink" title="Axios 的 API 管理"></a>Axios 的 API 管理</h2><p>當我們使用 axios 來串接 api 時，可以試著把 api crud 的相關操作都集中在一支 js 檔案管理，需要某個 api 操作時再引用出來，這樣的概念跟優點可以參考 <a href="https://medium.com/i-am-mike/%E4%BD%BF%E7%94%A8axios%E6%99%82%E4%BD%A0%E7%9A%84api%E9%83%BD%E6%80%8E%E9%BA%BC%E7%AE%A1%E7%90%86-557d88365619">Mike 老師的文章</a>。</p><p>自己最早接觸到這樣的概念是幾年前的某次面試，那時跟負責面試的技術主管討論了工作上的專案，以及聊到了在 Vue 直播班做的作品（2020 的直播班），而這位主管在面試快結束時，也給予我一些建議，像是可以鑽研 vue 的底層知識、vue2 到 vue3 的不同，以及 api 抽出來管理（真的很感謝那位技術主管）。雖然這次課程用到的 api 數量不多，所以即使沒有管理也是 OK 的，不過還是借著這樣的機會來做練習。</p><h3 id="抽出-api-程式"><a href="#抽出-api-程式" class="headerlink" title="抽出 api 程式"></a>抽出 api 程式</h3><ol><li>看了 api 操作有哪些之後，從專案根目錄開一個 api folder，並在裡頭新增 index.js</li><li>首先 import axios 到這支檔案中，並透過 axios.create 創建 axios 的實體<ul><li>雖然這次只用到 baseURL，不過還是可以看一下文件的 <a href="https://github.com/axios/axios#request-config">config</a></li></ul></li><li>把 api 的 crud 操作包裝在函式內，並 export 出去。這邊也先根據 api 文件去配置需要的參數，像是 data、id、headers<ul><li>在函式命名上我以 api 做開頭，表示這是處理 api 相關</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// api/index.js</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><br><span class="hljs-keyword">const</span> todoBase = axios.<span class="hljs-title function_">create</span>(&#123;<br><span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;https://...&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">// 註冊</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiUsersSignUp</span> = (<span class="hljs-params">data</span>) =&gt; todoBase.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/users/sign_up&quot;</span>, data);<br><br><span class="hljs-comment">// 登入</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiUsersSignIn</span> = (<span class="hljs-params">data</span>) =&gt; todoBase.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/users/sign_in&quot;</span>, data);<br><br><span class="hljs-comment">// 驗證</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiUsersCheckout</span> = (<span class="hljs-params">headers</span>) =&gt;<br>todoBase.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/users/checkout&quot;</span>, headers);<br><br><span class="hljs-comment">// 登出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiUsersSignOut</span> = (<span class="hljs-params">headers</span>) =&gt;<br>todoBase.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/users/sign_out&quot;</span>, &#123;&#125;, headers);<br><br><span class="hljs-comment">// 取得所有待辦</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiGetTodos</span> = (<span class="hljs-params">headers</span>) =&gt; todoBase.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/todos/&quot;</span>, headers);<br><br><span class="hljs-comment">// 新增待辦</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiPostTodos</span> = (<span class="hljs-params">data, headers</span>) =&gt;<br>todoBase.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/todos/&quot;</span>, data, headers);<br><br><span class="hljs-comment">// 刪除待辦</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiDeleteTodos</span> = (<span class="hljs-params">id, headers</span>) =&gt;<br>todoBase.<span class="hljs-title function_">delete</span>(<span class="hljs-string">`/todos/<span class="hljs-subst">$&#123;id&#125;</span>`</span>, headers);<br><br><span class="hljs-comment">// 切換待辦狀態</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiPatchTodos</span> = (<span class="hljs-params">id, headers</span>) =&gt;<br>todoBase.<span class="hljs-title function_">patch</span>(<span class="hljs-string">`/todos/<span class="hljs-subst">$&#123;id&#125;</span>/toggle`</span>, &#123;&#125;, headers);<br><br><span class="hljs-comment">// 編輯待辦文字</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">apiPutTodos</span> = (<span class="hljs-params">id, data, headers</span>) =&gt;<br>todoBase.<span class="hljs-title function_">put</span>(<span class="hljs-string">`/todos/<span class="hljs-subst">$&#123;id&#125;</span>`</span>, data, headers);<br></code></pre></td></tr></table></figure><h3 id="引用-1"><a href="#引用-1" class="headerlink" title="引用"></a>引用</h3><p>再來以新增項目跟刪除項目來做個範例：</p><ol><li>首先從 api&#x2F;index.js 引用我們需要的 api 函式，這個範例是新增跟刪除項目的函式</li><li>新增項目：在 addTodo 中去使用 apiPostTodos 這個操作，並帶上需要的 data(input value) 跟 headers(token)。後面一樣可接上 .then().catch()</li><li>刪除項目：在 deleteTodo 中去使用 apiDeleteTodos 這個操作，並帶上需要的 id(要刪除哪一筆) 跟 headers</li></ol><p>（範例中為了說明主要內容，所以會省略較多程式碼）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// Todo.jsx</span><br><span class="hljs-comment">// ...略</span><br><span class="hljs-keyword">import</span> &#123; apiPostTodos, apiDeleteTodos &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../api&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Todo</span> = (<span class="hljs-params">&#123; todoToken &#125;</span>) =&gt; &#123;<br><span class="hljs-comment">// ...略</span><br><span class="hljs-keyword">const</span> [input, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-keyword">const</span> headers = &#123;<br><span class="hljs-title class_">Authorization</span>: todoToken,<br>&#125;;<br><br><span class="hljs-comment">// ...略</span><br><br><span class="hljs-comment">// 新增項目</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">addTodo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">if</span> (input === <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-title function_">apiPostTodos</span>(&#123; <span class="hljs-attr">content</span>: input &#125;, &#123; headers &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;);<br><br><span class="hljs-title function_">setInput</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 清空</span><br><span class="hljs-title function_">getTodos</span>();<br>&#125;;<br><br><span class="hljs-comment">// 刪除項目</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">deleteTodo</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br><span class="hljs-title function_">apiDeleteTodos</span>(id, &#123; headers &#125;);<br><span class="hljs-title function_">getTodos</span>();<br>&#125;;<br><span class="hljs-comment">// ... 略</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Todo</span>;<br></code></pre></td></tr></table></figure><h3 id="題外話跟補充"><a href="#題外話跟補充" class="headerlink" title="題外話跟補充"></a>題外話跟補充</h3><p>雖然知道 Async&#x2F;Await 這個寫法在視覺上比較好讀，但不曉得為何自己一直都很習慣用 .then().catch() 的形式。<br>補充：如果不是用 axios 來串接 api，也是可以做到管理的，不過要自己多寫些程式封裝。</p><h2 id="關於-API-串接練習"><a href="#關於-API-串接練習" class="headerlink" title="關於 API 串接練習"></a>關於 API 串接練習</h2><p>在寫這篇文的過程中，也看到老師在公告中，建議同學盡量練習課程所提供的 API。我覺得這樣的練習相當重要，除了 AJAX 是前端的必須技能外，我也想分享這幾年在前端工作的心得。</p><p>前端工程師的職務內容，在不同公司跟產業中是差異很大的，再加上團隊氛圍等多種因素的影響。有的公司很重視切版、畫面，有的則很注重程式，有些時候也會被指派一些跟前端無關的任務。以我自己上一份工作經驗來說，大約有 10% 到 20% 的時間會做非程式任務，20% 的時間會處理一些後端部分（例如將表單資料送入資料庫），而剩下的部分才回到前端領域。（補充：這個段落不是抱怨，而是接受每個公司對前端需求是不同的，主要是當事者能否接受）</p><p>由於公司的類型多樣，比如團隊是否有前後端分離，或者專案的時辰充裕與否，再加總一些其他因素等等，我們不一定能在工作上串接到後端提供的 API，再來是不一定會有這麼詳盡的文件（<del>甚至沒有文件</del>）。所以如第一個段落所述，會覺得這樣的練習是很重要。<br>（當然也有一些第三方服務是可以串接練習的）</p><hr><h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>第三週作業如果寫的較為完整，就可以好好來銜接最終作業了。不曉得為何，這週寫作業時，腦袋會比較頻繁的當機，所以都要提醒自己起來動一動，做點不同的事情。</p><p>最近回來寫程式的過程（<del>復健</del>），一直能感覺到過去累積不少技術債，這陣子先專心在規劃好的任務上，之後再來還債了（例如：JS 核心）。</p><p>（若有什麼部分寫錯，也再麻煩跟我說，感恩！）</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>六角學院</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Nuxt3 使用 Bootstrap5</title>
    <link href="/post/nuxt3-install-bootstrap5.html"/>
    <url>/post/nuxt3-install-bootstrap5.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期正在練習把 Vue2 的舊專案翻成 Nuxt3，因為過去這個專案是使用 Bootstrap4，想說就順道升上 Bootstrap5。不過 Nuxt3 跟 Bootstrap5 並沒有一個整合好的套件（例如：BootstrapVue），所以在引用上就會多一些設置。</p><p>（一開始在考慮 Nuxt3 的套件整合上，本來是有考慮翻到 Tailwind，不過考慮到重切時間跟專注度，決定還是先專心熟悉 Nuxt3）</p><hr><h2 id="設置部分"><a href="#設置部分" class="headerlink" title="設置部分"></a>設置部分</h2><h3 id="CDN-配置"><a href="#CDN-配置" class="headerlink" title="CDN 配置"></a>CDN 配置</h3><p>這邊先提一個最簡易的配置，如果只是做個 Demo，沒有要使用到客製化，那麽就可以在 nuxt.config.ts 直接引入 CDN 使用。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// nuxt.config.ts</span><br><span class="hljs-keyword">import</span> &#123; defineNuxtConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;nuxt&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtConfig</span>(&#123;<br><span class="hljs-attr">app</span>: &#123;<br><span class="hljs-attr">head</span>: &#123;<br><span class="hljs-attr">link</span>: [<br>&#123;<br><span class="hljs-attr">rel</span>: <span class="hljs-string">&quot;stylesheet&quot;</span>,<br><span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css&quot;</span>,<br><span class="hljs-attr">integrity</span>:<br><span class="hljs-string">&quot;sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU&quot;</span>,<br><span class="hljs-attr">crossorigin</span>: <span class="hljs-string">&quot;anonymous&quot;</span>,<br>&#125;,<br>],<br><span class="hljs-attr">script</span>: [<br>&#123;<br><span class="hljs-attr">src</span>: <span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js&quot;</span>,<br><span class="hljs-attr">integrity</span>:<br><span class="hljs-string">&quot;sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ&quot;</span>,<br><span class="hljs-attr">crossorigin</span>: <span class="hljs-string">&quot;anonymous&quot;</span>,<br>&#125;,<br>],<br>&#125;,<br>&#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p>先在專案的終端機中，輸入以下 <code>npm install bootstrap @popperjs/core</code>。Popper.js 是跟一些 Bootstrap5 效果如 popper、tooltip 有關。</p><h3 id="css-設置"><a href="#css-設置" class="headerlink" title="css 設置"></a>css 設置</h3><p>我們可以在 nuxt.config.ts 的設置中，直接引入 bootstrap.scss，當然這樣就無法去客製；</p><p>這邊是在 assets 創建一個 main.scss，然後 <code>@import &quot;./variables&quot;;</code> 這個部分是從 node_module bootstrap 複製過來的，這樣就可以去客製一些 bootstrap 變數（例如：顏色、距離等等）。然後也能帶上自己要寫的 scss。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// nuxt.config.ts</span><br><span class="hljs-keyword">import</span> &#123; defineNuxtConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;nuxt&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtConfig</span>(&#123;<br><span class="hljs-attr">css</span>: [<br><span class="hljs-comment">// &#x27;bootstrap/scss/bootstrap.scss&#x27;,</span><br><span class="hljs-string">&quot;@/assets/styles/main.scss&quot;</span>,<br>],<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// main.scss</span><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;bootstrap/scss/functions&quot;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./variables&quot;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;bootstrap/scss/bootstrap&quot;</span>;<br><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./common&quot;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./page/prod&quot;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./page/home&quot;</span>;<br><span class="hljs-comment">// ... 略</span><br></code></pre></td></tr></table></figure><h3 id="JS-的設置"><a href="#JS-的設置" class="headerlink" title="JS 的設置"></a>JS 的設置</h3><p>在 Nuxt 專案的根目錄中，創建 plugins 的資料夾，並且新建一支 JS 檔案，這邊範例是用 useBootstrap.client.js 作為命名。</p><p>接下來把 node_module 中的 bootstrap.bundle.js 給引用進來，接著 <code>nuxtApp.provide(&quot;bootstrap&quot;, bootstrap)</code> 將 bootstrap.bundle.js 的功能引用到 Nuxt 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// useBootstrap.client.js</span><br><span class="hljs-keyword">import</span> bootstrap <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;bootstrap/dist/js/bootstrap.bundle&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtPlugin</span>(<span class="hljs-function">(<span class="hljs-params">nuxtApp</span>) =&gt;</span> &#123;<br>nuxtApp.<span class="hljs-title function_">provide</span>(<span class="hljs-string">&quot;bootstrap&quot;</span>, bootstrap);<br>&#125;);<br></code></pre></td></tr></table></figure><p>接著我們可以透過 <code>const &#123; $bootstrap &#125; = useNuxtApp()</code> 來使用 bootstrap js，記得要加上 $ 符號。<br>以下範例示意，當去打 api 拿回資料後，才去觸發 Modal：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// bootstrap js</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> &#123; $bootstrap &#125; = <span class="hljs-title function_">useNuxtApp</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// ... 其他程式略</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">$fetch(api, &#123;</span><br><span class="language-javascript"><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">headers</span>: headers,</span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> &#123; data &#125; = res;</span><br><span class="language-javascript"><span class="hljs-comment">// ... 略</span></span><br><span class="language-javascript">productModalHandle.<span class="hljs-title function_">show</span>();</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">productModalHandle = <span class="hljs-keyword">new</span> $bootstrap.<span class="hljs-title class_">Modal</span>(productModal.<span class="hljs-property">value</span>, &#123;&#125;); <span class="hljs-comment">// 記得綁上 ref</span></span><br><span class="language-javascript">delProductModalHandle = <span class="hljs-keyword">new</span> $bootstrap.<span class="hljs-title class_">Modal</span>(delProductModal.<span class="hljs-property">value</span>, &#123;&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>以上是參考這篇 <a href="https://stackoverflow.com/questions/71795143/how-to-use-bootstrap5-with-vite-and-nuxt3">stackoverflow</a>，並做個延伸。</p><p>如果有遇到 sass 的 abs 警告，則可以試著把 sass 的版本降低。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nuxt3</tag>
      
      <tag>Bootstrap5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>六角學院 React 入門工作坊第二週</title>
    <link href="/post/react-workshop-week2.html"/>
    <url>/post/react-workshop-week2.html</url>
    
    <content type="html"><![CDATA[<p>Photo by <a href="https://unsplash.com/@lautaroandreani?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Lautaro Andreani</a> on <a href="https://unsplash.com/photos/xkBaqlcqeb4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本週心得小提：<br>課程除了可以學習到 React 操作，還可以從老師怎麼拆解問題，以及同學的程式碼中（有些同學感覺是有經驗的開發者），去看到不同的思路，擴展出解決問題的眼界。</p><p>記得這週課程快結尾時，老師有提到工程師的差異，厲害的工程師是會把複雜轉為簡單，以清楚的方式撰寫程式碼（<del>取代很潮、炫技</del>），聽到這個段落，覺得特別有感。</p><p><a href="https://www.billyji.com/react-workshop-week2/">第二週作品</a></p><p>大致的流程為：</p><ol><li>思考資料與切版（練習 Tailwind）</li><li>程式邏輯撰寫</li><li>拆元件</li></ol><hr><h2 id="思考資料與切版（練習-Tailwind）"><a href="#思考資料與切版（練習-Tailwind）" class="headerlink" title="思考資料與切版（練習 Tailwind）"></a>思考資料與切版（練習 Tailwind）</h2><p>在開始動工之前，先來初步釐清會有什麼資料（功能）：</p><ul><li><p>菜單資料</p><ul><li><code>const [menu] = useState(data)</code>，放進 data 初始資料</li><li>根據菜單的點擊，會帶 id、品項、描述、單價等等資料到購物車</li><li>同一品項重覆點選時（該品項已經存在購物車），則在購物車資料中，將該品項數量 + 1</li></ul></li><li><p>購物車資料</p><ul><li><code>const [cart, setCart] = useState([])</code>，初始購物車為空 Array</li><li>除了菜單帶過來的資料外，也要多定義數量 <code>qty</code> 跟小計（數量*價錢）</li><li>刪除品項跟更新品項數量的功能</li><li>定義購物價錢總計 <code>const [sum, setSum] = useState(0)</code></li><li>備註 <code>const [note, setNote] = useState(&quot;&quot;)</code>;</li><li>點擊送出訂單時，會帶購物車資料到訂單</li></ul></li><li><p>訂單資料：</p><ul><li><code>const [order, setOrder] = useState([])</code>，初始為空 Array</li><li>除了從購物車帶過來的資料，也多定義一個 id</li></ul></li></ul><p>切版：<br>因為先前的工作內容，所以較常在手刻畫面；不過近期回來接觸前端後，有時候反而會思考，有沒有什麼方式可以減少切版的時間（<del>可能是開始想懶惰了?</del>）。記得幾個月前還有看到一個付費的功能，是把 figma 的設計圖，轉換成 react 的程式碼。<br>藉由這樣的實作機會跟想法，決定嘗試使用 Tailwind，記得 JIT 模式剛出時有稍微接觸過。本來預期習慣 Tailwind 不會花太多時間，不過實際上還是花了不少時間。<del>（也有去找人家寫好的 UI 來改）</del></p><h2 id="程式邏輯撰寫"><a href="#程式邏輯撰寫" class="headerlink" title="程式邏輯撰寫"></a>程式邏輯撰寫</h2><p>因為切版後的程式行數沒有很多(2xx)，所以就沒有先拆元件。</p><h3 id="將-menu-定義到畫面上"><a href="#將-menu-定義到畫面上" class="headerlink" title="將 menu 定義到畫面上"></a>將 menu 定義到畫面上</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> [menu] = <span class="hljs-title function_">useState</span>(data); <span class="hljs-comment">// 原始 menu</span><br><br><span class="hljs-keyword">return</span> (<br><span class="hljs-comment">// ...略</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;flex flex-wrap -mx-3&quot;</span>&gt;</span></span><br><span class="language-xml">&#123;menu.map((item) =&gt; &#123;</span><br><span class="language-xml">return (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;md:w-1/2 w-full px-3 pb-6&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;rounded-lg border-2 p-3 cursor-pointer border-brown-light hover:bg-brown-100&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-xl text-brown font-medium&quot;</span>&gt;</span></span><br><span class="language-xml">&#123;item.name&#125; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>$&#123;item.price&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mt-1 text-md text-brown&quot;</span>&gt;</span>&#123;item.description&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">);</span><br><span class="language-xml">&#125;)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="hljs-comment">// ...略</span><br>);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="選擇飲品點擊時，將資料帶入購物車"><a href="#選擇飲品點擊時，將資料帶入購物車" class="headerlink" title="選擇飲品點擊時，將資料帶入購物車"></a>選擇飲品點擊時，將資料帶入購物車</h3><ul><li>購物車資料預設為 []</li><li>在選擇飲品的 List，新增 onClick 事件觸發 addCart，並在參數中帶上資料 (menu item)</li><li>在 addCart function 做一個 tempCart 的新陣列，並多帶上預設數量 qty</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> [menu] = <span class="hljs-title function_">useState</span>(data); <span class="hljs-comment">// 原始 menu</span><br><span class="hljs-keyword">const</span> [cart, setCart] = <span class="hljs-title function_">useState</span>([]); <span class="hljs-comment">// 購物車資料</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">addCart</span> = (<span class="hljs-params">item</span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> tempCart = [<br>...cart, <span class="hljs-comment">// [] 淺拷貝</span><br>&#123;<br>...item,<br><span class="hljs-attr">qty</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 數量預設為 1</span><br>&#125;,<br>];<br><span class="hljs-title function_">setCart</span>(tempCart);<br>&#125;;<br><br><span class="hljs-keyword">return</span> (<br><span class="hljs-comment">// ...略</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;flex flex-wrap -mx-3&quot;</span>&gt;</span></span><br><span class="language-xml">&#123;menu.map((item) =&gt; &#123;</span><br><span class="language-xml">return (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;md:w-1/2 w-full px-3 pb-6&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> addCart(item)&#125;</span><br><span class="language-xml">&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;rounded-lg border-2 p-3 cursor-pointer border-brown-light hover:bg-brown-100&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-xl text-brown font-medium&quot;</span>&gt;</span></span><br><span class="language-xml">&#123;item.name&#125; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>$&#123;item.price&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mt-1 text-md text-brown&quot;</span>&gt;</span>&#123;item.description&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">);</span><br><span class="language-xml">&#125;)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="hljs-comment">// ... 略</span><br>);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="購物車資料定義到畫面"><a href="#購物車資料定義到畫面" class="headerlink" title="購物車資料定義到畫面"></a>購物車資料定義到畫面</h3><p>當我們可以透過點擊飲品，把飲品項目加到購物車，接著把購物車資料定義到畫面中。<br>（可以透過 <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=zh-TW">React Developer Tools</a> 工具來看資料）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> [menu] = <span class="hljs-title function_">useState</span>(data); <span class="hljs-comment">// 原始 menu</span><br><span class="hljs-keyword">const</span> [cart, setCart] = <span class="hljs-title function_">useState</span>([]); <span class="hljs-comment">// 購物車資料</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">addCart</span> = (<span class="hljs-params">item</span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> tempCart = [<br>...cart, <span class="hljs-comment">// [] 淺拷貝</span><br>&#123;<br>...item,<br><span class="hljs-attr">qty</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 數量預設為 1</span><br>&#125;,<br>];<br><span class="hljs-title function_">setCart</span>(tempCart);<br>&#125;;<br><br><span class="hljs-keyword">return</span> (<br><span class="hljs-comment">// ...略</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml">&#123;cart.map((item) =&gt; &#123;</span><br><span class="language-xml">return (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-3 border-b border-dashed border-brown-light&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-xl text-brown font-medium&quot;</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mt-1 text-md text-brown&quot;</span>&gt;</span>&#123;item.description&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mt-2 text-red-400 text-sm&quot;</span>&gt;</span></span><br><span class="language-xml">刪除品項</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-3 border-b border-dashed border-brown-light text-center text-md text-brown w-32&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;w-1/2 h-[32px] rounded-md text-center bg-brown-100 focus:outline-none focus:border-brown-dark&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">value</span>=<span class="hljs-string">&#123;item.qty&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span></span><br><span class="language-xml">&#123;[...Array(10).keys()].map((item) =&gt; &#123;</span><br><span class="language-xml">return (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;item</span> + <span class="hljs-attr">1</span>&#125; <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span>&gt;</span></span><br><span class="language-xml">&#123;item + 1&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">);</span><br><span class="language-xml">&#125;)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-3 border-b border-dashed border-brown-light text-center text-md text-brown&quot;</span>&gt;</span></span><br><span class="language-xml">&#123;item.price&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-3 border-b border-dashed border-brown-light text-center text-md text-brown&quot;</span>&gt;</span></span><br><span class="language-xml">&#123;item.price * item.qty&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">);</span><br><span class="language-xml">&#125;)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br>);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="判斷購物車是否為空"><a href="#判斷購物車是否為空" class="headerlink" title="判斷購物車是否為空"></a>判斷購物車是否為空</h3><p>以 <code>cart.length === 0</code> 來判斷要顯示的畫面</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123; cart.<span class="hljs-property">length</span> === <span class="hljs-number">0</span><br>  ? (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;rounded-lg border-2 border-brown-light mt-4 p-4 text-center text-brown font-bold&quot;</span>&gt;</span></span><br><span class="language-xml">    尚未選擇飲品～</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  ) : (<br>    <span class="hljs-comment">// ... 略</span><br>    &#123;cart.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-3 border-b border-dashed border-brown-light&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-xl text-brown font-medium&quot;</span>&gt;</span></span><br><span class="language-xml">              &#123;item.name&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mt-1 text-md text-brown&quot;</span>&gt;</span></span><br><span class="language-xml">              &#123;item.description&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mt-2 text-red-400 text-sm&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            &gt;</span></span><br><span class="language-xml">              刪除品項</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">          // ... 略</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br>      );<br>    &#125;)&#125;<br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="重覆點選飲品的判斷"><a href="#重覆點選飲品的判斷" class="headerlink" title="重覆點選飲品的判斷"></a>重覆點選飲品的判斷</h3><p>當我們點擊飲品，觸發飲品項目加到購物車時，還需判斷購物車中是否已經有此飲品品項，所以會以 id 作為判斷依據。</p><p>程式上先以 <code>const conformIndex = cart.findIndex((cartItem) =&gt; item.id === cartItem.id);</code> 來做判斷，對比飲品品項的 id 跟購物車 id。 (-1 表示購物車還沒有這個品項)</p><p>購物車沒有此品項時，就跑原本的新增程式；如果已經有此品項，就跑編輯的程式，編輯的寫法跟上週是一樣的，這邊就不再贅述。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">addCart</span> = (<span class="hljs-params">item</span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> conformIndex = cart.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">cartItem</span>) =&gt;</span> item.<span class="hljs-property">id</span> === cartItem.<span class="hljs-property">id</span>);<br><br><span class="hljs-keyword">if</span> (conformIndex === -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// -1 表示購物車還沒有這個品項</span><br><span class="hljs-keyword">const</span> tempCart = [<br>...cart, <span class="hljs-comment">// [] 淺拷貝</span><br>&#123;<br>...item,<br><span class="hljs-attr">qty</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 數量預設為 1</span><br>&#125;,<br>];<br><span class="hljs-title function_">setCart</span>(tempCart);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 購物車原先就有此品項</span><br><span class="hljs-keyword">const</span> tempCart = cart.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">cartItem</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> item.<span class="hljs-property">id</span> === cartItem.<span class="hljs-property">id</span><br>? &#123;<br>...cartItem,<br><span class="hljs-attr">qty</span>: cartItem.<span class="hljs-property">qty</span> &lt; <span class="hljs-number">10</span> ? cartItem.<span class="hljs-property">qty</span> + <span class="hljs-number">1</span> : cartItem.<span class="hljs-property">qty</span>,<br>  &#125;<br>: &#123; ...cartItem &#125;;<br>&#125;);<br><span class="hljs-title function_">setCart</span>(tempCart);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="購物車總計"><a href="#購物車總計" class="headerlink" title="購物車總計"></a>購物車總計</h3><p>先定義 <code>const [total, setTotal] = useState(0);</code> 總計資料，然後透過 useEffect 來觀察購物車是否有更動，只要更動就透過 reduce 重新計算總價。<br>（這邊就省略把 total 放到畫面上）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> [menu] = <span class="hljs-title function_">useState</span>(data); <span class="hljs-comment">// 原始 menu</span><br><span class="hljs-keyword">const</span> [cart, setCart] = <span class="hljs-title function_">useState</span>([]); <span class="hljs-comment">// 購物車資料</span><br><span class="hljs-keyword">const</span> [total, setTotal] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 總計</span><br><br>  <span class="hljs-comment">// ... 略</span><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> totalPrice = cart.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, curr</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> prev + curr.<span class="hljs-property">price</span> * curr.<span class="hljs-property">qty</span>;<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-title function_">setTotal</span>(totalPrice);<br>&#125;, [cart]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">//...略</span><br>  )<br><br></code></pre></td></tr></table></figure><h3 id="購物車品項更改數量-select"><a href="#購物車品項更改數量-select" class="headerlink" title="購物車品項更改數量 (select)"></a>購物車品項更改數量 (select)</h3><p>如果我們在 select 綁上 value ，但並沒有綁上 onChange 的功能時，雖然程式並不會整個爆掉，但會噴紅字加上不能操作 select。</p><p>所以在這邊加上 updateCart 的功能，記得帶上 <code>e.target.value</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> [menu] = <span class="hljs-title function_">useState</span>(data); <span class="hljs-comment">// 原始 menu</span><br><span class="hljs-keyword">const</span> [cart, setCart] = <span class="hljs-title function_">useState</span>([]); <span class="hljs-comment">// 購物車資料</span><br><span class="hljs-keyword">const</span> [total, setTotal] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 總計</span><br><br><span class="hljs-comment">// ... 略</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">updateCart</span> = (<span class="hljs-params">item, value</span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> tempCart = cart.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">cartItem</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> item.<span class="hljs-property">id</span> === cartItem.<span class="hljs-property">id</span><br>? &#123;<br>...cartItem,<br><span class="hljs-attr">qty</span>: <span class="hljs-title class_">Number</span>(value),<br>  &#125;<br>: &#123; ...cartItem &#125;;<br>&#125;);<br><span class="hljs-title function_">setCart</span>(tempCart);<br>&#125;;<br><br><span class="hljs-keyword">return</span> (<br><span class="hljs-comment">// ... 略</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-3 border-b border-dashed border-brown-light text-center text-md text-brown w-32&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;w-1/2 h-[32px] rounded-md text-center bg-brown-100 focus:outline-none focus:border-brown-dark&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">value</span>=<span class="hljs-string">&#123;item.qty&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> updateCart(item, e.target.value)&#125;</span><br><span class="language-xml">&gt;</span><br><span class="language-xml">&#123;[...Array(10).keys()].map((item) =&gt; &#123;</span><br><span class="language-xml">return (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;item</span> + <span class="hljs-attr">1</span>&#125; <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item&#125;</span>&gt;</span></span><br><span class="language-xml">&#123;item + 1&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">);</span><br><span class="language-xml">&#125;)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="hljs-comment">// ...略</span><br>);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="刪除購物車品項"><a href="#刪除購物車品項" class="headerlink" title="刪除購物車品項"></a>刪除購物車品項</h3><p>那時上課時，看到用 filter 來處理刪除功能，還是會有點反應不上來，雖然並不是第一次看到這樣操作。</p><p>筆記：<code>item.id === cartItem.id</code> 表示符合條件的只有一筆；所以反過來寫的話，就是除了這一筆之外的資料都要留著。<br>（畫面略)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">deleteCartItem</span> = (<span class="hljs-params">item</span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> tempCart = cart.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">cartItem</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> item.<span class="hljs-property">id</span> !== cartItem.<span class="hljs-property">id</span>;<br>&#125;);<br><span class="hljs-title function_">setCart</span>(tempCart);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="創建訂單"><a href="#創建訂單" class="headerlink" title="創建訂單"></a>創建訂單</h3><p>當我們點擊購物列表的送出按鈕後，會去觸發 createOder function。</p><ul><li>定義資料 <code>const [order, setOrder] = useState([]);</code></li><li>在 tempOrder 這個 array 中，除了帶上購物車、備註、總計的資料外，也多定義一個 id</li><li>最後記得清空購物車跟備註資料</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> [menu] = <span class="hljs-title function_">useState</span>(data); <span class="hljs-comment">// 原始 menu</span><br><span class="hljs-keyword">const</span> [cart, setCart] = <span class="hljs-title function_">useState</span>([]); <span class="hljs-comment">// 購物車資料</span><br><span class="hljs-keyword">const</span> [total, setTotal] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 總計</span><br><span class="hljs-keyword">const</span> [note, setNote] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 備註</span><br><span class="hljs-keyword">const</span> [order, setOrder] = <span class="hljs-title function_">useState</span>([]); <span class="hljs-comment">// 訂單</span><br><br><span class="hljs-comment">// ... 略</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createOder</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> tempOrder = [<br>...order,<br>&#123;<br><span class="hljs-attr">id</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>(),<br>cart,<br>note,<br>total,<br>&#125;,<br>];<br><br><span class="hljs-title function_">setOrder</span>(tempOrder);<br><span class="hljs-title function_">setCart</span>([]);<br><span class="hljs-title function_">setNote</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="定義訂單到畫面"><a href="#定義訂單到畫面" class="headerlink" title="定義訂單到畫面"></a>定義訂單到畫面</h3><p>先用 <code>order.length === 0</code> 判斷要顯示什麼畫面。接著把資料帶到畫面中。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div className=<span class="hljs-string">&quot;mx-auto lg:w-3/5 w-full&quot;</span>&gt;<br>&#123;<span class="hljs-comment">/* 訂單  */</span>&#125;<br>&#123;order.<span class="hljs-property">length</span> === <span class="hljs-number">0</span> ? (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;rounded-lg border-2 border-brown-light mt-4 p-4 text-center text-brown font-bold&quot;</span>&gt;</span></span><br><span class="language-xml">尚未建立訂單～</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>) : (<br>order.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;rounded-lg border-2 border-brown-light mt-4 p-4 text-brown text-center&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-2xl font-bold text-primary text-left&quot;</span>&gt;</span>訂單<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mt-1 text-md text-brown text-left&quot;</span>&gt;</span>編號：&#123;item.id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mt-1 text-md text-brown text-left&quot;</span>&gt;</span>備註：&#123;item.note&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mt-2 mb-4&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;w-full&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">thead</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;border-b-2 border-brown-light&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-3 font-medium text-brown&quot;</span>&gt;</span>品項<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-3 font-medium text-brown&quot;</span>&gt;</span>數量<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-3 font-medium text-brown&quot;</span>&gt;</span>小計<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">&#123;item.cart.map((innerItem) =&gt; &#123;</span><br><span class="language-xml">return (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">key</span>=<span class="hljs-string">&#123;innerItem.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">className</span>=<span class="hljs-string">&quot;border-b border-brown-light&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-3 text-brown&quot;</span>&gt;</span>&#123;innerItem.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-3 text-brown&quot;</span>&gt;</span>&#123;innerItem.qty&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-3 text-brown&quot;</span>&gt;</span></span><br><span class="language-xml">&#123;innerItem.qty * innerItem.price&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">);</span><br><span class="language-xml">&#125;)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colSpan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colSpan</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;p-3&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-center text-xl text-brown font-medium&quot;</span>&gt;</span></span><br><span class="language-xml">總計: $&#123;item.total&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;)<br>)&#125;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="拆元件"><a href="#拆元件" class="headerlink" title="拆元件"></a>拆元件</h2><p>處理好程式邏輯後，再來就是拆元件的部分，這邊就先拆出最基準的三個（Menu、Cart、Order）。</p><p>在拆元件之前，因為 ESLint 會提醒 props 的型別宣告，所以要先安裝 <a href="https://www.npmjs.com/package/prop-types">prop-types</a>。</p><h3 id="以-Cart-為範例"><a href="#以-Cart-為範例" class="headerlink" title="以 Cart 為範例"></a>以 Cart 為範例</h3><p>這邊就以購物車的元件作為主要範例，其他元件拆法都是一致的。首先我們先在 src 新增 components 資料夾，並新增元件(Cart.jsx)。</p><p>接著在 Cart.jsx 先建好預設，並 import propTypes 以及預設 propTypes 物件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// Cart.jsx</span><br><span class="hljs-keyword">import</span> propTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Cart</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> ()<br>&#125;<br><br><span class="hljs-title class_">Cart</span>.<span class="hljs-property">propTypes</span> = &#123;<br><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Cart</span>;<br></code></pre></td></tr></table></figure><p>將 App.jsx 中的購物車內容，移動到 Cart.jsx 的樣板中。<br>然後在 App.jsx 引入 Cart.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// Cart.jsx</span><br><span class="hljs-keyword">import</span> propTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Cart</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> (<br>  &lt;div className=&quot;&quot;&gt;<br>    &#123;/* 購物車 */&#125;<br>    &lt;h2 className=&quot;text-2xl font-bold text-primary&quot;&gt;購物列表&lt;/h2&gt;<br>    &lt;hr className=&quot;mt-2 mb-4&quot; /&gt;<br>    &#123;cart.length === 0 ? (<br>      &lt;div className=&quot;rounded-lg border-2 border-brown-light mt-4 p-4 text-center text-brown font-bold&quot;&gt;<br>        尚未選擇飲品～<br>      &lt;/div&gt;<br>    ) : (<br>      &lt;div className=&quot;rounded-lg border-2 border-brown-light mt-4 p-4&quot;&gt;<br>        &lt;table className=&quot;min-w-full leading-normal&quot;&gt;<br>          &lt;thead&gt;<br>            &lt;tr&gt;<br>              &lt;th className=&quot;p-3 text-left text-xs font-semibold text-brown-light&quot;&gt;<br>                飲品資訊<br>              &lt;/th&gt;<br>              &lt;th className=&quot;p-3 text-center text-xs font-semibold text-brown-light&quot;&gt;<br>                數量<br>              &lt;/th&gt;<br>              &lt;th className=&quot;p-3 text-center text-xs font-semibold text-brown-light&quot;&gt;<br>                單價<br>              &lt;/th&gt;<br>    // ... 以下略<br>);<br>&#125;;<br><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// App.jsx</span><br><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Cart</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/Cart&quot;</span>;<br><span class="hljs-comment">// ... 略</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-comment">// ... 略</span><br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;bg-[#F8F6F2] min-h-screen&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container mx-auto px-3 py-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;grid grid-cols-1 gap-4 lg:grid-cols-2 lg:gap-8&quot;</span>&gt;</span></span><br><span class="language-xml">// 略 ...</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Cart</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mt-4 mb-6&quot;</span> /&gt;</span></span><br><span class="language-xml">// ...略</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>在 Cart.jsx 定義好預計要傳過來的資料跟功能，如下圖所示，我們可以根據紅字（沒有定義）來知道預計要傳過來的資料跟功能。接著透過 Cart.propTypes 定義好要傳進來的資料型別、功能</p><p><img src="https://i.imgur.com/WCPjccp.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// Cart.jsx</span><br><span class="hljs-keyword">import</span> propTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Cart</span> = (<span class="hljs-params">&#123; cart, deleteCartItem, updateCart, total, note, setNote,</span><br><span class="hljs-params">createOder &#125;</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;/* 購物車 */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-2xl font-bold text-primary&quot;</span>&gt;</span>購物列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mt-2 mb-4&quot;</span> /&gt;</span></span><br><span class="language-xml">    // ... 略</span><br><span class="language-xml">  )</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">Cart.propTypes = &#123;</span><br><span class="language-xml">  cart: propTypes.array.isRequired,</span><br><span class="language-xml">  deleteCartItem: propTypes.func.isRequired,</span><br><span class="language-xml">  updateCart: propTypes.func.isRequired,</span><br><span class="language-xml">  total: propTypes.number.isRequired,</span><br><span class="language-xml">  note: propTypes.string.isRequired,</span><br><span class="language-xml">  setNote: propTypes.func.isRequired,</span><br><span class="language-xml">  createOder: propTypes.func.isRequired,</span><br><span class="language-xml">&#125;;</span><br></code></pre></td></tr></table></figure><p>根據在 Cart.jsx 所需要的資料或功能，我們就可以從父層傳入相對應的資料跟功能。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// app.jsx</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Cart</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/Cart&quot;</span>;<br><span class="hljs-comment">// ...略</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-comment">// ... 略</span><br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;bg-[#F8F6F2] min-h-screen&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container mx-auto px-3 py-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;grid grid-cols-1 gap-4 lg:grid-cols-2 lg:gap-8&quot;</span>&gt;</span></span><br><span class="language-xml">// ... 略</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Cart</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">cart</span>=<span class="hljs-string">&#123;cart&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">deleteCartItem</span>=<span class="hljs-string">&#123;deleteCartItem&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">updateCart</span>=<span class="hljs-string">&#123;updateCart&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">total</span>=<span class="hljs-string">&#123;total&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">note</span>=<span class="hljs-string">&#123;note&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">setNote</span>=<span class="hljs-string">&#123;setNote&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">createOder</span>=<span class="hljs-string">&#123;createOder&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;mt-4 mb-6&quot;</span> /&gt;</span></span><br><span class="language-xml">// ... 略</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>現在在寫 React 時，都特別能感受自己原生 JS 的不足，雖然能寫出程式，不過有時都會覺得卡卡的。先前寫 Vue 並不會這樣覺得，可能是因為 Vue 幫我們做了很多事（黑魔法）。</p><p>在寫這週紀錄的結尾時，就在想第三週跟第四週可能會換種方式紀錄，雖然這樣的步驟拆解，可以讓我刻意練習思路；主要是考量到自己的其他規劃，不過目前倒還不曉得要改用什麼方式，也許下週就會有靈感了（？）。</p><p>（若有什麼部分寫錯，也再麻煩跟我說，感恩！）</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>六角學院</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pinia 筆記</title>
    <link href="/post/learn-pinia.html"/>
    <url>/post/learn-pinia.html</url>
    
    <content type="html"><![CDATA[<h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一段時間沒接觸前端領域，能很明顯感受到前端的變化如此之快。以 Vue 來說，透過官網提供的安裝 <code>npm init vue@latest</code>，也已經預設 vite 環境，以及把原先的 Vuex 改為 Pinia。</p><p>目前正在複習 Vue ，這邊也把 Pinia 做個筆記，關於 Pinia 的特點：</p><ul><li>跟 Vuex 很像，都是作為狀態管理的工作</li><li>沒有 Mutation （後來才知道有些開發者不喜歡這個步驟）</li><li>簡潔定義</li><li>可以寫 Option api ，也能寫 Composition api</li><li>支援 Typescript</li><li><del>可愛的官方吉祥物</del></li></ul><hr><h2 id="筆記"><a href="#筆記" class="headerlink" title="筆記"></a>筆記</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>先以 store&#x2F;counter.js 作為範例，我們需要先從 pinia 引入 defineStore 這個功能。</p><p>如下範例，上方是用 composition api 的寫法，而下方是原本的 option 寫法 (Vuex 是這樣寫的)，兩種方式的選擇可依照自己所偏好的。在下方的範例中，將會以 composition api 的方式作筆記。</p><p>對照：</p><table><thead><tr><th>Option</th><th>Composition</th></tr></thead><tbody><tr><td>state</td><td>ref</td></tr><tr><td>getters</td><td>computed</td></tr><tr><td>action</td><td>function</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><br><span class="hljs-comment">// composition</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCounterStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&quot;counter&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">const</span> doubleCount = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> count.<span class="hljs-property">value</span> * <span class="hljs-number">2</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>count.<span class="hljs-property">value</span>++;<br>&#125;<br><span class="hljs-keyword">return</span> &#123; count, doubleCount, increment &#125;;<br>&#125;);<br><br><span class="hljs-comment">// option</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCounterStore = <span class="hljs-title function_">defineStore</span>(&#123;<br><span class="hljs-attr">id</span>: <span class="hljs-string">&quot;counter&quot;</span>,<br><span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br><span class="hljs-attr">counter</span>: <span class="hljs-number">0</span>,<br>&#125;),<br><span class="hljs-attr">getters</span>: &#123;<br><span class="hljs-attr">doubleCount</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">counter</span> * <span class="hljs-number">2</span>,<br>&#125;,<br><span class="hljs-attr">action</span>: &#123;<br><span class="hljs-title function_">addCount</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">counter</span>++;<br>&#125;,<br>&#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>在元件的引用中，先透過路徑 import useCounterStore 這個功能，然後再放到 store 這個變數。這邊因為使用了 script setup 這個語法糖，所以不用使用 return 就可在樣板中使用。</p><p>（這支範例程式是 .vue 檔案，不過因為程式碼無法產生高亮反應，所以以 html 作為替代）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; useCounterStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/stores/counter.js&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useCounterStore</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">triggerStoreIncrement</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">store.<span class="hljs-title function_">increment</span>();</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Pinia<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>pinia資料：&#123;&#123; store.count &#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;triggerStoreIncrement&quot;</span>&gt;</span><br>觸發 pinia increment<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="api-的處理"><a href="#api-的處理" class="headerlink" title="api 的處理"></a>api 的處理</h3><p>先前用 vuex 時，如果要打個 api，步驟是：</p><ol><li>元件做 dispatch</li><li>在 action 打 api，並且 commit</li><li>透過 commit 去觸發 mutation，然後改資料 (state)</li></ol><p>不過現在 pinia + composition api，變得比較簡潔（自由？），如下方程式碼所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// products.js</span><br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useProductsStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&quot;product&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> products = <span class="hljs-title function_">ref</span>([]);<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchApi</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;https://fakestoreapi.com/products&quot;</span>);<br>products.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>;<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-comment">// error</span><br>&#125;<br>&#125;;<br><span class="hljs-keyword">return</span> &#123; products, fetchApi &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- products.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; useProductsStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/stores/products.js&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useProductsStore</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">triggerStoreFetchApi</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">store.<span class="hljs-title function_">fetchApi</span>();</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>產品頁<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; store.products &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;triggerStoreFetchApi&quot;</span>&gt;</span>Get API<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="關於解構的可能問題"><a href="#關於解構的可能問題" class="headerlink" title="關於解構的可能問題"></a>關於解構的可能問題</h3><p>當我們從元件去接 pinia 資料或方法時，可以透過解構達到更乾淨的 template，讓我們不用在 template 寫 <code>store.xxxxxxx</code>；不過如果是跟 ref 相關的資料 (ref、computed) ，解構會造成資料失去響應式，這時就可以用 pinia 提供的 <code>storeToRefs()</code>，來達成解構 ref 資料但不失去響應式。</p><p>解構方面的問題，主要是對於 ref 相關資料；如果是 reactive 或函式就可以直接解構使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; useCounterStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/stores/counter.js&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useCounterStore</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> &#123; count &#125; = <span class="hljs-title function_">storeToRefs</span>(store);</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> &#123; increment &#125; = store; <span class="hljs-comment">// 函式直接解構使用</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Pinia<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>pinia資料：&#123;&#123; count &#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>觸發 increment<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pinia</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>六角學院 React 入門工作坊第一週</title>
    <link href="/post/react-workshop-week1.html"/>
    <url>/post/react-workshop-week1.html</url>
    
    <content type="html"><![CDATA[<p>Photo by <a href="https://unsplash.com/@lautaroandreani?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Lautaro Andreani</a> on <a href="https://unsplash.com/photos/xkBaqlcqeb4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因為身體關係，所以暫離了前端領域一段時間；而近期隨著身體已經趨於穩定（恢復中），所以想再度接回前端的軌道，目前保持進修中，也參加了六角開的 React 入門工作坊，增加與前端的連結。</p><p>先前寫過 Vue 一段時間，所以在學習 React 時，能比較知道這兩者的一些比對，React 寫法的確比較自由，但很吃原生 JS 的功力（這方面偏弱 QQ)，<strong>而這篇文章主要是想把第一週作業的過程，做點紀錄跟刻意練習寫程式的思路</strong>。</p><p><a href="https://codepen.io/yaj55ushydna/pen/dyQEjaP?editors=0110">作業放置處</a></p><p>大致的流程為：</p><ol><li>定義資料並渲染</li><li>調整庫存數量</li><li>庫存數量優化</li><li>編輯品項名稱</li></ol><hr><h2 id="定義資料並渲染"><a href="#定義資料並渲染" class="headerlink" title="定義資料並渲染"></a>定義資料並渲染</h2><p>不論使用哪個前端框架，我們都不是用 Dom 的角度做切入；而是採用<strong>資料驅動畫面</strong>的概念，所以定義資料、操作資料都是很常見的。</p><p>使用 JSX 語法上，需要習慣一段時間。分享我自己的小撇步：<strong>在 JSX 語法中，如果要開始寫 JS 就用 {}；而準備要寫 HTML 就用 ()。</strong>（註：這是一個記憶撇步，實際上 JSX 內的概念就都是 JS）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; useState &#125; = <span class="hljs-title class_">React</span>;<br><br><span class="hljs-keyword">const</span> drinkMenu = [<br><span class="hljs-comment">// 略...</span><br>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MenuManage</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">const</span> [menu, setMenu] = <span class="hljs-title function_">useState</span>(drinkMenu); <span class="hljs-comment">// Hooks</span><br><br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>餐點管理工具<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">// ...略</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml">&#123;menu.map((item) =&gt; &#123;</span><br><span class="language-xml">return (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>&#123;item.content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;item.price&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;item.qty&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">);</span><br><span class="language-xml">&#125;)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MenuManage</span> /&gt;</span></span>);<br></code></pre></td></tr></table></figure><h2 id="調整庫存數量"><a href="#調整庫存數量" class="headerlink" title="調整庫存數量"></a>調整庫存數量</h2><p>(考量到程式碼的長度，所以有些部分會做個省略)</p><p>再來我們要調整庫存數量，所以做了兩個按鈕來對應增減的功能，而像是 <code>() =&gt; handleQtyAdd(item.id) </code> 所傳入的 <code>item.id</code> 則為識別用，判斷我們要改的是資料中的哪一個。</p><p>至於在庫存增加跟減少的功能中，我們得產出一組新的 array，然後再做 setState （下方範例是 setMenu），是因為 <strong>React state immutable</strong> 的設計概念。簡單來說就是寫 React 遇到要更新物件或陣列時，要根據更新需求去產新的物件或陣列。（有興趣的話可以 Google，或者參考這篇<a href="https://ithelp.ithome.com.tw/articles/10301603">文章</a>)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 前略...</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MenuManage</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// Hooks 資料定義</span><br><span class="hljs-keyword">const</span> [menu, setMenu] = <span class="hljs-title function_">useState</span>(drinkMenu);<br><br><span class="hljs-comment">// 庫存增加</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleQtyAdd</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br><span class="hljs-comment">// id 為傳過來的參數，用於判斷現在點到是第幾個</span><br><span class="hljs-keyword">const</span> menuTemp = menu.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> item.<span class="hljs-property">id</span> === id ? &#123; ...item, <span class="hljs-attr">qty</span>: (item.<span class="hljs-property">qty</span> += <span class="hljs-number">1</span>) &#125; : item;<br>&#125;);<br><span class="hljs-title function_">setMenu</span>(menuTemp);<br>&#125;;<br><br><span class="hljs-comment">// 庫存減少</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleQtyMinus</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> menuTemp = menu.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> item.<span class="hljs-property">id</span> === id ? &#123; ...item, <span class="hljs-attr">qty</span>: (item.<span class="hljs-property">qty</span> -= <span class="hljs-number">1</span>) &#125; : item;<br>&#125;);<br><span class="hljs-title function_">setMenu</span>(menuTemp);<br>&#125;;<br><br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>餐點管理工具<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">// 略...</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml">&#123;menu.map((item) =&gt; &#123;</span><br><span class="language-xml">return (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">// 略...</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleQtyMinus(item.id)&#125;&gt;</span><br><span class="language-xml">-</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">&#123;item.qty&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleQtyAdd(item.id)&#125;&gt;</span><br><span class="language-xml">+</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">);</span><br><span class="language-xml">&#125;)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MenuManage</span> /&gt;</span></span>);<br></code></pre></td></tr></table></figure><p>如果不太理解三元運算子，或寫起來很卡的話，也可以先用最簡易的 if else 來寫，然後再慢慢對照三元運算的概念。<br>以下取庫存增加的 function 來做範例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 庫存增加</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleQtyAdd</span> = (<span class="hljs-params">id</span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> menuTemp = menu.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (item.<span class="hljs-property">id</span> === id) &#123;<br><span class="hljs-keyword">return</span> &#123;<br>...item,<br><span class="hljs-attr">qty</span>: (item.<span class="hljs-property">qty</span> += <span class="hljs-number">1</span>),<br>&#125;;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> item;<br>&#125;<br><br><span class="hljs-comment">// return item.id === id</span><br><span class="hljs-comment">//   ? &#123; ...item, qty: (item.qty += 1) &#125;</span><br><span class="hljs-comment">//   : item;</span><br>&#125;);<br><span class="hljs-title function_">setMenu</span>(menuTemp);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="庫存數量優化"><a href="#庫存數量優化" class="headerlink" title="庫存數量優化"></a>庫存數量優化</h2><p>因為庫存數量增減的 function 只有差異在 <code>item.qty += 1</code> 跟 <code>item.qty -= 1</code>，所以把增減的兩個 function 縮減成一個，然後多傳入一個參數（type) 作為增減的判斷。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; useState &#125; = <span class="hljs-title class_">React</span>;<br><br><span class="hljs-keyword">const</span> drinkMenu = [<br><span class="hljs-comment">// 略 ...</span><br>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MenuManage</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// Hooks 資料定義</span><br><span class="hljs-keyword">const</span> [menu, setMenu] = <span class="hljs-title function_">useState</span>(drinkMenu);<br><br><span class="hljs-comment">// 庫存數量功能</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleQtyFn</span> = (<span class="hljs-params">id, type</span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> menuTemp = menu.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> item.<span class="hljs-property">id</span> === id<br>? &#123; ...item, <span class="hljs-attr">qty</span>: type === <span class="hljs-string">&quot;add&quot;</span> ? (item.<span class="hljs-property">qty</span> += <span class="hljs-number">1</span>) : (item.<span class="hljs-property">qty</span> -= <span class="hljs-number">1</span>) &#125;<br>: item;<br>&#125;);<br><span class="hljs-title function_">setMenu</span>(menuTemp);<br>&#125;;<br><br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>餐點管理工具<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">// 略 ...</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml">&#123;menu.map((item) =&gt; &#123;</span><br><span class="language-xml">return (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml">// 略...</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleQtyFn(item.id, &quot;minus&quot;)&#125;</span><br><span class="language-xml">&gt;</span><br><span class="language-xml">-</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">&#123;item.qty&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleQtyFn(item.id, &quot;add&quot;)&#125;</span><br><span class="language-xml">&gt;</span><br><span class="language-xml">+</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">);</span><br><span class="language-xml">&#125;)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MenuManage</span> /&gt;</span></span>);<br></code></pre></td></tr></table></figure><h2 id="編輯品項名稱"><a href="#編輯品項名稱" class="headerlink" title="編輯品項名稱"></a>編輯品項名稱</h2><p>這個部分剛開始有卡關一陣，主要是定義 state 資料所產生的問題。在編輯品項中，剛開始的粗淺想法是增加一個 boolen state 來做判斷 （像是：<code>const [status, setStatus] = useState(true)</code>），不過這樣的方式無法去識別<strong>點編輯的項目是哪一個</strong>，例如對某個品項點擊編輯，會發現全部品項都可以編譯。</p><p>後來改用定義 id（<code>const [currentId, setCurrentId] = useState(&#39;&#39;)</code>）的方式為依據。流程大致是：<br>在初始狀態 <code>currentId</code> 為空值時，每個餐點項目都是顯示”品項名稱”跟”編輯按鈕”；假設第二個品項中的編輯按鈕被點擊時，就會透過 <code>handleCurrentId</code> 以及第二個品項的 <code>item.id</code> 參數去做 <code>setCurrentId</code>，此時在樣板的 <code>item.id === currentId</code> 判斷中，第二個品項就會顯示 “input” 跟”完成按鈕”。</p><p>(至於 input 的 onChange，邏輯上跟前面庫存的寫法一致，所以就不再贅述。)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; useState &#125; = <span class="hljs-title class_">React</span>;<br><br><span class="hljs-keyword">const</span> drinkMenu = [<br><span class="hljs-comment">// 略 ...</span><br>];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MenuManage</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// Hooks 資料定義</span><br><span class="hljs-keyword">const</span> [menu, setMenu] = <span class="hljs-title function_">useState</span>(drinkMenu);<br><span class="hljs-keyword">const</span> [currentId, setCurrentId] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-comment">// 略...</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleCurrentId</span> = (<span class="hljs-params">id, type</span>) =&gt; &#123;<br>type === <span class="hljs-string">&quot;edit&quot;</span> ? <span class="hljs-title function_">setCurrentId</span>(id) : <span class="hljs-title function_">setCurrentId</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;;<br><br><span class="hljs-comment">// input</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleChangeInput</span> = (<span class="hljs-params">e, id</span>) =&gt; &#123;<br><span class="hljs-keyword">const</span> menuTemp = menu.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> item.<span class="hljs-property">id</span> === id ? &#123; ...item, <span class="hljs-attr">name</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> &#125; : item;<br>&#125;);<br><span class="hljs-title function_">setMenu</span>(menuTemp);<br>&#125;;<br><br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>餐點管理工具<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">// 略 ...</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml">&#123;menu.map((item) =&gt; &#123;</span><br><span class="language-xml">return (</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">&#123;item.id === currentId ? (</span><br><span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">value</span>=<span class="hljs-string">&#123;item.name&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> handleChangeInput(e, item.id)&#125;</span><br><span class="language-xml">/&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleCurrentId(item.id, &quot;complete&quot;)&#125;</span><br><span class="language-xml">&gt;</span><br><span class="language-xml">完成</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/&gt;</span></span><br><span class="language-xml">) : (</span><br><span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">&#123;item.name&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> handleCurrentId(item.id, &quot;edit&quot;)&#125;</span><br><span class="language-xml">&gt;</span><br><span class="language-xml">編輯</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/&gt;</span></span><br><span class="language-xml">)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">// 略...</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">);</span><br><span class="language-xml">&#125;)&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br>&lt;/table&gt;<br>&lt;/div&gt;<br>);<br>&#125;<br><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MenuManage</span> /&gt;</span></span>);<br></code></pre></td></tr></table></figure><hr><h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>實際在寫 React 的時候，還是能感受到自己原生 JS 功力比較弱，所以這樣的刻意練習，應該也是會有幫助的。另外如果有什麼部分或概念寫錯，也再麻煩指導，感謝！</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>六角學院</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刻骨銘心的 2022</title>
    <link href="/post/unforgettable-2022.html"/>
    <url>/post/unforgettable-2022.html</url>
    
    <content type="html"><![CDATA[<p>2022 也即將踏上尾聲，如果要我對 2022 下一些關鍵字的話，我會選擇「<strong>痛苦</strong>」、「<strong>爭執</strong>」、「<strong>覺察</strong>」、「<strong>掙扎</strong>」、「<strong>疑難雜症</strong>」等這五組字詞。</p><p>在去年年底時，因擔心影響到工作，所以本來沒有打Ｘ苗的打算，也決定先打一劑試試，而沒想到這一個決定會影響到至今，以我寫文的這個當下，快滿週年了（<del>週年慶先不要，拜託了</del>）。</p><p>打了Ｘ苗後在診所外休息，正當感覺到不太舒服時就昏了過去。醒來後在診所休息了一陣，因為昏倒時有撞到頭，所以也到鄰近的大醫院檢查，所幸檢查結果沒有大礙。不過這段經歷也是相當不舒服的，在檢查候診、醫生觀察的同時，我也不斷領受著畏寒的副作用。（還好打苗的時候，有請太太陪同）</p><p>爾後就開始了這趟身體不適之旅（<del>討厭的旅途</del>），一月中的某一天忽然覺得很不舒服，擔心會不會是心肌炎，不過去大醫院檢查心臟的結果是一切正常，我也忘不了那個醫生疑惑的表情，他應該是在想說：「為何這個年輕人只有微微發燒，卻無力到需要被用輪椅推著……。」</p><p>在一月底到三月底這段時間，是還能出門上班的，也還好二月假期比較多，算是很大的分擔與緩解，讓身體可以抓緊時間多休息。而這段期間的後期，身體也有持續再恢復著，生活、工作上也越來越接近健康狀態；不過好景不長，接近三月底之前的某一天，又開始覺得身體渾身不對勁，莫名的不舒服感又再度來襲，整體狀況也掉得很快，我知道我的狀態應該暫時回不來了，也正式無法工作了。</p><p>三月底無法工作，而四月底左右時，衡量了彼此的整體狀況，跟太太提議暫時回彼此的家裡（分居），大概一到兩週時再聚個一次。</p><p>當時的症狀有：</p><ul><li>心悸</li><li>胃脹氣</li><li>疲倦無力</li><li>莫名不舒服</li><li>莫名不安（恐慌感）</li><li>害怕出門</li></ul><p>直到現在，有些症狀已經減輕或消失，有些還努力調養中。這麼多症狀，還涵蓋了身體與心理（恐慌、害怕出門），如果在西醫的角度上，就會被診斷為「<strong>自律神經失調</strong>」；而以中醫的角度，就會用「<strong>疑難雜症</strong>」來形容。（個人主觀偏好用後者，不過並沒有想戰什麼 XD）</p><hr><p>近期回顧這段時間的日記，發現自己從今年的前期到寫這文章的當下，一直都想知道為什麼？身體發生了什麼事？找答案的過程中，主要是以中醫作為調理，然後自己跳下來研究很多範疇：X 苗副作用、自然醫學、斷食、營養品、恐慌症、中醫等等。而最近幾個月就比較限縮在中醫知識了，一來是自己的偏好，二來是中醫本身的概念涵蓋較廣（全人、身心一體）；不過到目前都沒拼湊出什麼蛛絲馬跡，期望總有一天能知道些什麼。現在就先對自己說：「這就是人生苦澀體驗……」</p><p>這段過程除了研究外，也盡力調整作息與心情，嘗試了營養品（GABA、CBD、南非醉茄…），然後也到廟裡求神問事、收驚，以及人生第一次的催眠等等。有些故事也留待之後再來說了（<del>如果有想起來的話</del>）。</p><p>除了本身的病痛外，心理上的調整也讓我覺得很不容易，加上不能自主自在的出門，所以也少了很多的抒發管道。過去在心情煩悶時，還能去健身房舉舉重量，到操場跑一跑，出外逛街、找個地方喝咖啡……等等；不過現在都無法了，取而代之的是：自己面對自己的時間，在日常生活中（尤其夜深人靜時），更能觸碰到自己的想法與情緒，看著大腦不斷反芻著過去，然後焦慮的想像未來場景。而不論過去或未來，對於現在這個此刻來說都不是真實的；不過卻像我們在看電影一樣，很容易就被拉入劇情中，尤其是負面的劇情。</p><p>這段時間經歷了很多劇本，像是”自己和自己過意不去”、”和周遭進行價值觀的爭執（<del>簡單來說就是吵架</del>）”、以及”社會對我的評價（<del>簡單來說就是會被評價、攻擊</del>）”。而有些情景也歷歷在目，像是五月、六月晚上寫日記時，因為有著太多負面情緒，差點把日記本撕爛；或者在爭執後，拖著疲倦的身軀體會著低潮，想著：「到底是要我怎麼樣？我還能怎麼辦呢？」，以及低潮時腦海的喃喃自語：「這樣的痛苦何時會消失呢？如果沒去打那針就好了……」</p><p>雖然乘載了許多負面，但很幸運的在這過程中也遇到幾位貴人幫助，引導我去接觸正念冥想，指出我個性、習慣可以調整的部分，建議我可以去看什麼書籍，在這難熬的時間陪我聊天，給予我心理上的支持。讓我的心情從「<strong>死死卡快活</strong>」轉變到「<strong>即使難看的掙扎著，我也要做好現在能做的事情</strong>」。</p><p><strong>感謝家人、醫生們、好友、催眠師、收驚老師、公司老闆及同事、新認識的朋友，這些恩情我會記在心裡的。</strong></p><p>Photo by <a href="https://unsplash.com/@kellysikkema?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Kelly Sikkema</a> on <a href="https://unsplash.com/photos/UCnYf3lVnr8?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
